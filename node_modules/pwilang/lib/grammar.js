module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "any": parse_any,
        "any_inline": parse_any_inline,
        "anything": parse_anything,
        "anything_dquoted": parse_anything_dquoted,
        "anything_inline": parse_anything_inline,
        "anything_squoted": parse_anything_squoted,
        "comment": parse_comment,
        "endline": parse_endline,
        "escaped": parse_escaped,
        "identifier": parse_identifier,
        "jinja_tag": parse_jinja_tag,
        "jinja_tag_contents": parse_jinja_tag_contents,
        "jinja_tag_contents_inline": parse_jinja_tag_contents_inline,
        "jinja_tag_contents_original": parse_jinja_tag_contents_original,
        "jinja_tag_inline": parse_jinja_tag_inline,
        "jinja_tag_inline_eol": parse_jinja_tag_inline_eol,
        "jinja_tag_original": parse_jinja_tag_original,
        "jinja_variable": parse_jinja_variable,
        "line": parse_line,
        "lines": parse_lines,
        "mod": parse_mod,
        "mod_ident": parse_mod_ident,
        "modifiers": parse_modifiers,
        "selfclosing_tag": parse_selfclosing_tag,
        "space": parse_space,
        "tag": parse_tag,
        "tag_inline": parse_tag_inline,
        "tag_to_eol": parse_tag_to_eol,
        "tag_to_eol_inline": parse_tag_to_eol_inline,
        "toplevel": parse_toplevel,
        "unquoted_contents": parse_unquoted_contents,
        "variable_any_bracket": parse_variable_any_bracket,
        "variable_any_paren": parse_variable_any_paren,
        "variable_contents": parse_variable_contents,
        "variable_contents_rec": parse_variable_contents_rec,
        "variable_ident": parse_variable_ident
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "toplevel";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_toplevel() {
        var cacheKey = 'toplevel@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result6 = parse_lines();
        var result7 = result6 !== null
          ? (function(lines) {
            set_indent(0);
          return lines + (check_tag_stack() + "");
          })(result6)
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result4 = parse_space();
          var result2 = result4 !== null ? result4 : '';
          var result3 = result2 !== null
            ? (function(sp) {
              return sp;
            })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lines() {
        var cacheKey = 'lines@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_line();
        if (result5 !== null) {
          var result6 = parse_lines();
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(line, lines) {
            return line + lines;
          })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_line();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_line() {
        var cacheKey = 'line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos10 = pos;
        var savedPos11 = pos;
        var result56 = parse_endline();
        var result50 = result56 !== null ? result56 : '';
        if (result50 !== null) {
          var result55 = parse_space();
          var result51 = result55 !== null ? result55 : '';
          if (result51 !== null) {
            var result52 = parse_tag_inline();
            if (result52 !== null) {
              var result54 = parse_anything();
              var result53 = result54 !== null ? result54 : '';
              if (result53 !== null) {
                var result48 = [result50, result51, result52, result53];
              } else {
                var result48 = null;
                pos = savedPos11;
              }
            } else {
              var result48 = null;
              pos = savedPos11;
            }
          } else {
            var result48 = null;
            pos = savedPos11;
          }
        } else {
          var result48 = null;
          pos = savedPos11;
        }
        var result49 = result48 !== null
          ? (function(end, sp, tag, contents) {
            var res;
          set_indent(sp.length);
          res = check_tag_stack() + "" + check_contents(end) + (options.inline ? "" : sp) + tag + contents;
          push_contents(tag + "" + contents);
          return res;
          })(result48[0], result48[1], result48[2], result48[3])
          : null;
        if (result49 !== null) {
          var result47 = result49;
        } else {
          var result47 = null;
          pos = savedPos10;
        }
        if (result47 !== null) {
          var result0 = result47;
        } else {
          var savedPos8 = pos;
          var savedPos9 = pos;
          var result46 = parse_endline();
          var result38 = result46 !== null ? result46 : '';
          if (result38 !== null) {
            var result45 = parse_space();
            var result39 = result45 !== null ? result45 : '';
            if (result39 !== null) {
              var result40 = parse_modifiers();
              if (result40 !== null) {
                var result44 = parse_space();
                var result41 = result44 !== null ? result44 : '';
                if (result41 !== null) {
                  var result43 = parse_anything();
                  var result42 = result43 !== null ? result43 : '';
                  if (result42 !== null) {
                    var result36 = [result38, result39, result40, result41, result42];
                  } else {
                    var result36 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result36 = null;
                  pos = savedPos9;
                }
              } else {
                var result36 = null;
                pos = savedPos9;
              }
            } else {
              var result36 = null;
              pos = savedPos9;
            }
          } else {
            var result36 = null;
            pos = savedPos9;
          }
          var result37 = result36 !== null
            ? (function(end, sp, mods, contents) {
              var tag, res;
            set_indent(sp.length);
            tag = new Tag({
              name: "div",
              mods: mods
            });
            res = check_tag_stack() + "" + check_contents(end) + (options.inline ? "" : sp) + tag.opening() + contents;
            stack_tag(tag);
            push_contents(contents);
            return res;
            })(result36[0], result36[1], result36[2], result36[4])
            : null;
          if (result37 !== null) {
            var result35 = result37;
          } else {
            var result35 = null;
            pos = savedPos8;
          }
          if (result35 !== null) {
            var result0 = result35;
          } else {
            var savedPos6 = pos;
            var savedPos7 = pos;
            var result34 = parse_endline();
            var result28 = result34 !== null ? result34 : '';
            if (result28 !== null) {
              var result33 = parse_space();
              var result29 = result33 !== null ? result33 : '';
              if (result29 !== null) {
                var result30 = parse_tag();
                if (result30 !== null) {
                  var result32 = parse_anything();
                  var result31 = result32 !== null ? result32 : '';
                  if (result31 !== null) {
                    var result26 = [result28, result29, result30, result31];
                  } else {
                    var result26 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos7;
                }
              } else {
                var result26 = null;
                pos = savedPos7;
              }
            } else {
              var result26 = null;
              pos = savedPos7;
            }
            var result27 = result26 !== null
              ? (function(end, sp, tag, contents) {
                var res;
              set_indent(sp.length);
              res = check_tag_stack() + "" + check_contents(end) + (options.inline ? "" : sp) + tag.opening() + contents;
              stack_tag(tag);
              push_contents(contents);
              return res;
              })(result26[0], result26[1], result26[2], result26[3])
              : null;
            if (result27 !== null) {
              var result25 = result27;
            } else {
              var result25 = null;
              pos = savedPos6;
            }
            if (result25 !== null) {
              var result0 = result25;
            } else {
              var savedPos4 = pos;
              var savedPos5 = pos;
              var result24 = parse_endline();
              var result18 = result24 !== null ? result24 : '';
              if (result18 !== null) {
                var result23 = parse_space();
                var result19 = result23 !== null ? result23 : '';
                if (result19 !== null) {
                  var result20 = parse_jinja_tag();
                  if (result20 !== null) {
                    var result22 = parse_anything();
                    var result21 = result22 !== null ? result22 : '';
                    if (result21 !== null) {
                      var result16 = [result18, result19, result20, result21];
                    } else {
                      var result16 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos5;
                }
              } else {
                var result16 = null;
                pos = savedPos5;
              }
              var result17 = result16 !== null
                ? (function(end, sp, tag, contents) {
                  var sp, sl, res;
                set_indent(sp.length);
                if (options.inline) {
                  sp = "";
                }
                sl = tag.spaceless;
                res = check_tag_stack(tag.name) + "" + check_contents(end) + sp + "{%" + sl + " " + tag.name + contents + " " + sl + "%}";
                if (tag.name in jinja_tags && jinja_tags[tag.name]['until']) {
                  stack_block(tag.name, tag.spaceless);
                }
                return res;
                })(result16[0], result16[1], result16[2], result16[3])
                : null;
              if (result17 !== null) {
                var result15 = result17;
              } else {
                var result15 = null;
                pos = savedPos4;
              }
              if (result15 !== null) {
                var result0 = result15;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result14 = parse_endline();
                var result10 = result14 !== null ? result14 : '';
                if (result10 !== null) {
                  var result13 = parse_space();
                  var result11 = result13 !== null ? result13 : '';
                  if (result11 !== null) {
                    var result12 = parse_anything();
                    if (result12 !== null) {
                      var result8 = [result10, result11, result12];
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(end, sp, contents) {
                    var sp, res;
                  set_indent(sp.length);
                  if (options.inline) {
                    sp = "";
                  }
                  res = check_tag_stack() + "" + check_contents(end) + sp + contents;
                  push_contents(contents);
                  return res;
                  })(result8[0], result8[1], result8[2])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var savedPos0 = pos;
                  var savedPos1 = pos;
                  var result4 = parse_endline();
                  if (result4 !== null) {
                    var result6 = parse_space();
                    var result5 = result6 !== null ? result6 : '';
                    if (result5 !== null) {
                      var result2 = [result4, result5];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                  var result3 = result2 !== null
                    ? (function(end, sp) {
                      var sp;
                    set_indent(0);
                    if (options.inline) {
                      sp = "";
                    }
                    return check_tag_stack() + "" + check_contents(end) + sp;
                    })(result2[0], result2[1])
                    : null;
                  if (result3 !== null) {
                    var result1 = result3;
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[\-:a-zA-Z0-9_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-:a-zA-Z0-9_]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[\-:a-zA-Z0-9_]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[\\-:a-zA-Z0-9_]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ident) {
            return ident[0] + ident[1].join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything() {
        var cacheKey = 'anything@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_any();
        if (result5 !== null) {
          var result6 = parse_anything();
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_any();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_inline() {
        var cacheKey = 'anything_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse_any_inline();
        if (result6 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "]") {
            var result9 = "]";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result8 = parse_anything_inline();
            if (result8 !== null) {
              var result4 = [result6, result7, result8];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        var result5 = result4 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result4[0], result4[2])
          : null;
        if (result5 !== null) {
          var result3 = result5;
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "\\]") {
            var result2 = "\\]";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\]\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_any_inline();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_inline() {
        var cacheKey = 'any_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result12 = parse_escaped();
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var result11 = parse_jinja_variable();
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var result10 = parse_jinja_tag_inline();
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var result9 = parse_tag_inline();
              if (result9 !== null) {
                var result0 = result9;
              } else {
                var result8 = parse_tag_to_eol_inline();
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var result7 = parse_selfclosing_tag();
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var savedPos2 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    var result6 = parse_endline();
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result6 === null) {
                      var result4 = '';
                    } else {
                      var result4 = null;
                      pos = savedPos2;
                    }
                    if (result4 !== null) {
                      if (input.length > pos) {
                        var result5 = input.charAt(pos);
                        pos++;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed('any character');
                        }
                      }
                      if (result5 !== null) {
                        var result2 = [result4, result5];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                    var result3 = result2 !== null
                      ? (function(character) {
                        return character;
                      })(result2[1])
                      : null;
                    if (result3 !== null) {
                      var result1 = result3;
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any() {
        var cacheKey = 'any@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result13 = parse_escaped();
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var result12 = parse_comment();
          if (result12 !== null) {
            var result0 = result12;
          } else {
            var result11 = parse_jinja_variable();
            if (result11 !== null) {
              var result0 = result11;
            } else {
              var result10 = parse_jinja_tag_inline_eol();
              if (result10 !== null) {
                var result0 = result10;
              } else {
                var result9 = parse_tag_inline();
                if (result9 !== null) {
                  var result0 = result9;
                } else {
                  var result8 = parse_tag_to_eol();
                  if (result8 !== null) {
                    var result0 = result8;
                  } else {
                    var result7 = parse_selfclosing_tag();
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      var savedPos0 = pos;
                      var savedPos1 = pos;
                      var savedPos2 = pos;
                      var savedReportMatchFailuresVar0 = reportMatchFailures;
                      reportMatchFailures = false;
                      var result6 = parse_endline();
                      reportMatchFailures = savedReportMatchFailuresVar0;
                      if (result6 === null) {
                        var result4 = '';
                      } else {
                        var result4 = null;
                        pos = savedPos2;
                      }
                      if (result4 !== null) {
                        if (input.length > pos) {
                          var result5 = input.charAt(pos);
                          pos++;
                        } else {
                          var result5 = null;
                          if (reportMatchFailures) {
                            matchFailed('any character');
                          }
                        }
                        if (result5 !== null) {
                          var result2 = [result4, result5];
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                      var result3 = result2 !== null
                        ? (function(character) {
                          return character;
                        })(result2[1])
                        : null;
                      if (result3 !== null) {
                        var result1 = result3;
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_escaped() {
        var cacheKey = 'escaped@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result10 = "\\";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result10 !== null) {
          if (input.substr(pos).match(/^[@%${ ]/) !== null) {
            var result11 = input.charAt(pos);
            pos++;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("[@%${ ]");
            }
          }
          if (result11 !== null) {
            var result8 = [result10, result11];
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(a) {
            return a;
          })(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 2) === "{#") {
            var result5 = "{#";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"{#\"");
            }
          }
          var result6 = result5 !== null
            ? (function() {
              return "\u007b#";
            })()
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 2) === "#}") {
              var result2 = "#}";
              pos += 2;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"#}\"");
              }
            }
            var result3 = result2 !== null
              ? (function() {
                return "#\u007d";
              })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag() {
        var cacheKey = 'tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "@") {
          var result3 = "@";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_identifier();
          if (result4 !== null) {
            var result8 = parse_modifiers();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result7 = parse_space();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ident, mods) {
            return Tag({
            name: ident,
            mods: mods
          });
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_to_eol() {
        var cacheKey = 'tag_to_eol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_tag();
        if (result3 !== null) {
          var result5 = parse_anything();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(tag, anything) {
            return tag.opening() + "" + anything + tag.closing();
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_to_eol_inline() {
        var cacheKey = 'tag_to_eol_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_tag();
        if (result3 !== null) {
          var result5 = parse_anything_inline();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(tag, anything) {
            return tag.opening() + "" + anything + tag.closing();
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_inline() {
        var cacheKey = 'tag_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = parse_tag();
        if (result11 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result12 = "[";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result12 !== null) {
            var result15 = parse_space();
            var result13 = result15 !== null ? result15 : '';
            if (result13 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result14 = "]";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result14 !== null) {
                var result9 = [result11, result12, result13, result14];
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(tag, sp) {
            return tag.opening() + "" + sp + tag.closing();
          })(result9[0], result9[2])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_tag();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "[") {
              var result5 = "[";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_anything_inline();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result7 = "]";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(tag, contents) {
              return tag.opening() + "" + contents + tag.closing();
            })(result2[0], result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_contents() {
        var cacheKey = 'jinja_tag_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_endline();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          if (input.length > pos) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_endline();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(seq) {
            var item;
          if (seq) {
            return (function(){
              var _i, _ref, _len, _results = [];
              for (_i = 0, _len = (_ref = seq).length; _i < _len; ++_i) {
                item = _ref[_i];
                _results.push(item[1]);
              }
              return _results;
            }()).join("");
          } else {
            return "";
          }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_contents_inline() {
        var cacheKey = 'jinja_tag_contents_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        var savedReportMatchFailuresVar1 = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_endline();
        reportMatchFailures = savedReportMatchFailuresVar1;
        if (result8 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos3;
        }
        if (result4 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "]") {
            var result7 = "]";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            if (input.length > pos) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar1 = reportMatchFailures;
            reportMatchFailures = false;
            var result8 = parse_endline();
            reportMatchFailures = savedReportMatchFailuresVar1;
            if (result8 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos3;
            }
            if (result4 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === "]") {
                var result7 = "]";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 === null) {
                var result5 = '';
              } else {
                var result5 = null;
                pos = savedPos2;
              }
              if (result5 !== null) {
                if (input.length > pos) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result6 !== null) {
                  var result3 = [result4, result5, result6];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(seq) {
            var item;
          if (seq) {
            return (function(){
              var _i, _ref, _len, _results = [];
              for (_i = 0, _len = (_ref = seq).length; _i < _len; ++_i) {
                item = _ref[_i];
                _results.push(item[2]);
              }
              return _results;
            }()).join("");
          } else {
            return "";
          }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_contents_original() {
        var cacheKey = 'jinja_tag_contents_original@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 2) === "%}") {
          var result6 = "%}";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"%}\"");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          if (input.length > pos) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "%}") {
              var result6 = "%}";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"%}\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(seq) {
            var item;
          if (seq) {
            return (function(){
              var _i, _ref, _len, _results = [];
              for (_i = 0, _len = (_ref = seq).length; _i < _len; ++_i) {
                item = _ref[_i];
                _results.push(item[1]);
              }
              return _results;
            }()).join("");
          } else {
            return "";
          }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_original() {
        var cacheKey = 'jinja_tag_original@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() { return options.jinja; })() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos, 2) === "{%") {
            var result4 = "{%";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{%\"");
            }
          }
          if (result4 !== null) {
            var result7 = parse_jinja_tag_contents_original();
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              if (input.substr(pos, 2) === "%}") {
                var result6 = "%}";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"%}\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(contents) {
            return "{%" + contents + "%}";
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_inline_eol() {
        var cacheKey = 'jinja_tag_inline_eol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_jinja_tag_original();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_jinja_tag();
          if (result4 !== null) {
            var result6 = parse_jinja_tag_contents();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(tag, contents) {
              var endtag;
            endtag = get_jinja_end(tag);
            return "{%- " + tag.name + contents + " -%}" + endtag;
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_inline() {
        var cacheKey = 'jinja_tag_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_jinja_tag_original();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_jinja_tag();
          if (result4 !== null) {
            var result6 = parse_jinja_tag_contents_inline();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(tag, contents) {
              var endtag;
            endtag = get_jinja_end(tag);
            return "{%- " + tag.name + contents + " -%}" + endtag;
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag() {
        var cacheKey = 'jinja_tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() { return options.jinja; })() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos, 1) === "%") {
            var result4 = "%";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"%\"");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "%") {
              var result11 = "%";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"%\"");
              }
            }
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result10 = "-";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              var result6 = result10 !== null ? result10 : '';
              if (result6 !== null) {
                var result9 = parse_space();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_identifier();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(end, sl, ident) {
            return {
            name: ident,
            spaceless: sl
          };
          })(result1[2], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selfclosing_tag() {
        var cacheKey = 'selfclosing_tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "@/") {
          var result3 = "@/";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@/\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_identifier();
          if (result4 !== null) {
            var result8 = parse_modifiers();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result7 = parse_space();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ident, mods) {
            return Tag({
            name: ident,
            mods: mods
          }).selfclose();
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mod_ident() {
        var cacheKey = 'mod_ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_identifier();
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_escaped();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result4 = parse_jinja_variable();
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result6 = parse_identifier();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_escaped();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_jinja_variable();
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(idents) {
            return idents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_modifiers() {
        var cacheKey = 'modifiers@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_mod();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_mod();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(modifiers) {
            var mods, i;
          mods = modifiers[modifiers.length - 1];
          for (i = modifiers.length - 2; i >= 0; --i) {
            mods = merge_modifiers(modifiers[i], mods);
          }
          return mods;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mod() {
        var cacheKey = 'mod@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos10 = pos;
        var savedPos11 = pos;
        var result49 = parse_space();
        var result46 = result49 !== null ? result49 : '';
        if (result46 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result47 = ".";
            pos += 1;
          } else {
            var result47 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result47 !== null) {
            var result48 = parse_mod_ident();
            if (result48 !== null) {
              var result44 = [result46, result47, result48];
            } else {
              var result44 = null;
              pos = savedPos11;
            }
          } else {
            var result44 = null;
            pos = savedPos11;
          }
        } else {
          var result44 = null;
          pos = savedPos11;
        }
        var result45 = result44 !== null
          ? (function(ident) {
            return mod_class(ident);
          })(result44[2])
          : null;
        if (result45 !== null) {
          var result43 = result45;
        } else {
          var result43 = null;
          pos = savedPos10;
        }
        if (result43 !== null) {
          var result0 = result43;
        } else {
          var savedPos8 = pos;
          var savedPos9 = pos;
          var result42 = parse_space();
          var result39 = result42 !== null ? result42 : '';
          if (result39 !== null) {
            if (input.substr(pos, 1) === "#") {
              var result40 = "#";
              pos += 1;
            } else {
              var result40 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result40 !== null) {
              var result41 = parse_mod_ident();
              if (result41 !== null) {
                var result37 = [result39, result40, result41];
              } else {
                var result37 = null;
                pos = savedPos9;
              }
            } else {
              var result37 = null;
              pos = savedPos9;
            }
          } else {
            var result37 = null;
            pos = savedPos9;
          }
          var result38 = result37 !== null
            ? (function(ident) {
              return {
              id: ident
            };
            })(result37[2])
            : null;
          if (result38 !== null) {
            var result36 = result38;
          } else {
            var result36 = null;
            pos = savedPos8;
          }
          if (result36 !== null) {
            var result0 = result36;
          } else {
            var savedPos6 = pos;
            var savedPos7 = pos;
            var result35 = parse_space();
            var result29 = result35 !== null ? result35 : '';
            if (result29 !== null) {
              var result30 = parse_mod_ident();
              if (result30 !== null) {
                if (input.substr(pos, 2) === "=\"") {
                  var result31 = "=\"";
                  pos += 2;
                } else {
                  var result31 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\\\"\"");
                  }
                }
                if (result31 !== null) {
                  var result34 = parse_anything_dquoted();
                  var result32 = result34 !== null ? result34 : '';
                  if (result32 !== null) {
                    if (input.substr(pos, 1) === "\"") {
                      var result33 = "\"";
                      pos += 1;
                    } else {
                      var result33 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\\\"\"");
                      }
                    }
                    if (result33 !== null) {
                      var result27 = [result29, result30, result31, result32, result33];
                    } else {
                      var result27 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result27 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result27 = null;
                  pos = savedPos7;
                }
              } else {
                var result27 = null;
                pos = savedPos7;
              }
            } else {
              var result27 = null;
              pos = savedPos7;
            }
            var result28 = result27 !== null
              ? (function(ident, contents) {
                var r;
              r = {};
              r[ident] = contents;
              return r;
              })(result27[1], result27[3])
              : null;
            if (result28 !== null) {
              var result26 = result28;
            } else {
              var result26 = null;
              pos = savedPos6;
            }
            if (result26 !== null) {
              var result0 = result26;
            } else {
              var savedPos4 = pos;
              var savedPos5 = pos;
              var result25 = parse_space();
              var result19 = result25 !== null ? result25 : '';
              if (result19 !== null) {
                var result20 = parse_mod_ident();
                if (result20 !== null) {
                  if (input.substr(pos, 2) === "='") {
                    var result21 = "='";
                    pos += 2;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"='\"");
                    }
                  }
                  if (result21 !== null) {
                    var result24 = parse_anything_squoted();
                    var result22 = result24 !== null ? result24 : '';
                    if (result22 !== null) {
                      if (input.substr(pos, 1) === "'") {
                        var result23 = "'";
                        pos += 1;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"'\"");
                        }
                      }
                      if (result23 !== null) {
                        var result17 = [result19, result20, result21, result22, result23];
                      } else {
                        var result17 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos5;
                }
              } else {
                var result17 = null;
                pos = savedPos5;
              }
              var result18 = result17 !== null
                ? (function(ident, contents) {
                  var r;
                r = {};
                r[ident] = contents;
                return r;
                })(result17[1], result17[3])
                : null;
              if (result18 !== null) {
                var result16 = result18;
              } else {
                var result16 = null;
                pos = savedPos4;
              }
              if (result16 !== null) {
                var result0 = result16;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result15 = parse_space();
                var result11 = result15 !== null ? result15 : '';
                if (result11 !== null) {
                  var result12 = parse_mod_ident();
                  if (result12 !== null) {
                    if (input.substr(pos, 1) === "=") {
                      var result13 = "=";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"=\"");
                      }
                    }
                    if (result13 !== null) {
                      var result14 = parse_unquoted_contents();
                      if (result14 !== null) {
                        var result9 = [result11, result12, result13, result14];
                      } else {
                        var result9 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
                var result10 = result9 !== null
                  ? (function(ident, contents) {
                    var r;
                  r = {};
                  r[ident] = contents;
                  return r;
                  })(result9[1], result9[3])
                  : null;
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var savedPos0 = pos;
                  var savedPos1 = pos;
                  var result7 = parse_space();
                  var result4 = result7 !== null ? result7 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 1) === "\\") {
                      var result5 = "\\";
                      pos += 1;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\\\\\"");
                      }
                    }
                    if (result5 !== null) {
                      var result6 = parse_mod_ident();
                      if (result6 !== null) {
                        var result2 = [result4, result5, result6];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                  var result3 = result2 !== null
                    ? (function(ident) {
                      var r;
                    r = {};
                    r[ident] = "";
                    return r;
                    })(result2[2])
                    : null;
                  if (result3 !== null) {
                    var result1 = result3;
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_dquoted() {
        var cacheKey = 'anything_dquoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "\\\"") {
          var result7 = "\\\"";
          pos += 2;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var result6 = parse_escaped();
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result5 = parse_jinja_variable();
            if (result5 !== null) {
              var result3 = result5;
            } else {
              if (input.substr(pos).match(/^[^"]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\"]");
                }
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos, 2) === "\\\"") {
              var result7 = "\\\"";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var result6 = parse_escaped();
              if (result6 !== null) {
                var result3 = result6;
              } else {
                var result5 = parse_jinja_variable();
                if (result5 !== null) {
                  var result3 = result5;
                } else {
                  if (input.substr(pos).match(/^[^"]/) !== null) {
                    var result4 = input.charAt(pos);
                    pos++;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("[^\"]");
                    }
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(string_contents) {
            return string_contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_squoted() {
        var cacheKey = 'anything_squoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "\\'") {
          var result6 = "\\'";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\'\"");
          }
        }
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_escaped();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos, 2) === "\\'") {
              var result6 = "\\'";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\'\"");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_escaped();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[^']/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^']");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(string_contents) {
            return string_contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unquoted_contents() {
        var cacheKey = 'unquoted_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_escaped();
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_jinja_variable();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            if (input.substr(pos).match(/^[^ \n	]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[^ \\n	]");
              }
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result6 = parse_escaped();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_jinja_variable();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[^ \n	]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^ \\n	]");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(contents) {
            return contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_variable() {
        var cacheKey = 'jinja_variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = (function() { return options.jinja; })() ? '' : null;
        if (result11 !== null) {
          if (input.substr(pos, 1) === "$") {
            var result12 = "$";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result12 !== null) {
            var result13 = parse_variable_ident();
            if (result13 !== null) {
              var result15 = parse_variable_contents();
              var result14 = result15 !== null ? result15 : '';
              if (result14 !== null) {
                var result9 = [result11, result12, result13, result14];
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(ident, cnt) {
            return "{{ " + ident + cnt + " }}";
          })(result9[2], result9[3])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = (function() { return options.jinja; })() ? '' : null;
          if (result4 !== null) {
            if (input.substr(pos, 2) === "$(") {
              var result5 = "$(";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"$(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_variable_any_paren();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(cnt) {
              return "{{ " + cnt + " }}";
            })(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_contents() {
        var cacheKey = 'variable_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_variable_contents_rec();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_variable_contents_rec();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(contents) {
            return contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_contents_rec() {
        var cacheKey = 'variable_contents_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos, 1) === ".") {
          var result24 = ".";
          pos += 1;
        } else {
          var result24 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result24 !== null) {
          var result25 = parse_variable_contents();
          if (result25 !== null) {
            var result22 = [result24, result25];
          } else {
            var result22 = null;
            pos = savedPos7;
          }
        } else {
          var result22 = null;
          pos = savedPos7;
        }
        var result23 = result22 !== null
          ? (function(v) {
            return "." + v;
          })(result22[1])
          : null;
        if (result23 !== null) {
          var result21 = result23;
        } else {
          var result21 = null;
          pos = savedPos6;
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === "|") {
            var result19 = "|";
            pos += 1;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result19 !== null) {
            var result20 = parse_variable_contents();
            if (result20 !== null) {
              var result17 = [result19, result20];
            } else {
              var result17 = null;
              pos = savedPos5;
            }
          } else {
            var result17 = null;
            pos = savedPos5;
          }
          var result18 = result17 !== null
            ? (function(v) {
              return "|" + v;
            })(result17[1])
            : null;
          if (result18 !== null) {
            var result16 = result18;
          } else {
            var result16 = null;
            pos = savedPos4;
          }
          if (result16 !== null) {
            var result0 = result16;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === "[") {
              var result12 = "[";
              pos += 1;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result12 !== null) {
              var result15 = parse_variable_any_bracket();
              var result13 = result15 !== null ? result15 : '';
              if (result13 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result14 = "]";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result14 !== null) {
                  var result10 = [result12, result13, result14];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
            var result11 = result10 !== null
              ? (function(a) {
                return "[" + a + "]";
              })(result10[1])
              : null;
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;
              pos = savedPos2;
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result5 = "(";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result5 !== null) {
                var result8 = parse_variable_any_paren();
                var result6 = result8 !== null ? result8 : '';
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result3 = [result5, result6, result7];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
              var result4 = result3 !== null
                ? (function(a) {
                  return "(" + a + ")";
                })(result3[1])
                : null;
              if (result4 !== null) {
                var result2 = result4;
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_variable_ident();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_bracket() {
        var cacheKey = 'variable_any_bracket@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "\\]") {
          var result17 = "\\]";
          pos += 2;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\]\"");
          }
        }
        if (result17 !== null) {
          var result3 = result17;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === "[") {
            var result13 = "[";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result13 !== null) {
            var result16 = parse_variable_any_bracket();
            var result14 = result16 !== null ? result16 : '';
            if (result14 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result15 = "]";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result15 !== null) {
                var result11 = [result13, result14, result15];
              } else {
                var result11 = null;
                pos = savedPos5;
              }
            } else {
              var result11 = null;
              pos = savedPos5;
            }
          } else {
            var result11 = null;
            pos = savedPos5;
          }
          var result12 = result11 !== null
            ? (function(a) { return "[" + a + "]" })(result11[1])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos4;
          }
          if (result10 !== null) {
            var result3 = result10;
          } else {
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "]") {
              var result9 = "]";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result5 = [result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            var result6 = result5 !== null
              ? (function(a) { return a })(result5[1])
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos, 2) === "\\]") {
              var result17 = "\\]";
              pos += 2;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\]\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var savedPos4 = pos;
              var savedPos5 = pos;
              if (input.substr(pos, 1) === "[") {
                var result13 = "[";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result13 !== null) {
                var result16 = parse_variable_any_bracket();
                var result14 = result16 !== null ? result16 : '';
                if (result14 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result15 = "]";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result15 !== null) {
                    var result11 = [result13, result14, result15];
                  } else {
                    var result11 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos5;
                }
              } else {
                var result11 = null;
                pos = savedPos5;
              }
              var result12 = result11 !== null
                ? (function(a) { return "[" + a + "]" })(result11[1])
                : null;
              if (result12 !== null) {
                var result10 = result12;
              } else {
                var result10 = null;
                pos = savedPos4;
              }
              if (result10 !== null) {
                var result3 = result10;
              } else {
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedPos3 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                if (input.substr(pos, 1) === "]") {
                  var result9 = "]";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result9 === null) {
                  var result7 = '';
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
                if (result7 !== null) {
                  if (input.length > pos) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result8 !== null) {
                    var result5 = [result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
                var result6 = result5 !== null
                  ? (function(a) { return a })(result5[1])
                  : null;
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(bracket_contents) {
            return bracket_contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_paren() {
        var cacheKey = 'variable_any_paren@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "\\)") {
          var result17 = "\\)";
          pos += 2;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\)\"");
          }
        }
        if (result17 !== null) {
          var result3 = result17;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === "(") {
            var result13 = "(";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result13 !== null) {
            var result16 = parse_variable_any_paren();
            var result14 = result16 !== null ? result16 : '';
            if (result14 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result15 = ")";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result15 !== null) {
                var result11 = [result13, result14, result15];
              } else {
                var result11 = null;
                pos = savedPos5;
              }
            } else {
              var result11 = null;
              pos = savedPos5;
            }
          } else {
            var result11 = null;
            pos = savedPos5;
          }
          var result12 = result11 !== null
            ? (function(a) { return "(" + a +")" })(result11[1])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos4;
          }
          if (result10 !== null) {
            var result3 = result10;
          } else {
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === ")") {
              var result9 = ")";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result5 = [result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            var result6 = result5 !== null
              ? (function(a) { return a })(result5[1])
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos, 2) === "\\)") {
              var result17 = "\\)";
              pos += 2;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\)\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var savedPos4 = pos;
              var savedPos5 = pos;
              if (input.substr(pos, 1) === "(") {
                var result13 = "(";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result13 !== null) {
                var result16 = parse_variable_any_paren();
                var result14 = result16 !== null ? result16 : '';
                if (result14 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result15 = ")";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result15 !== null) {
                    var result11 = [result13, result14, result15];
                  } else {
                    var result11 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos5;
                }
              } else {
                var result11 = null;
                pos = savedPos5;
              }
              var result12 = result11 !== null
                ? (function(a) { return "(" + a +")" })(result11[1])
                : null;
              if (result12 !== null) {
                var result10 = result12;
              } else {
                var result10 = null;
                pos = savedPos4;
              }
              if (result10 !== null) {
                var result3 = result10;
              } else {
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedPos3 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                if (input.substr(pos, 1) === ")") {
                  var result9 = ")";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result9 === null) {
                  var result7 = '';
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
                if (result7 !== null) {
                  if (input.length > pos) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result8 !== null) {
                    var result5 = [result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
                var result6 = result5 !== null
                  ? (function(a) { return a })(result5[1])
                  : null;
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(paren_contents) {
            return paren_contents.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_ident() {
        var cacheKey = 'variable_ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(id) {
            return id[0] + "" + (id[1] ? id[1].join("") : "");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "#") {
          var result3 = "#";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result10 = parse_endline();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result10 === null) {
            var result8 = '';
          } else {
            var result8 = null;
            pos = savedPos4;
          }
          if (result8 !== null) {
            if (input.length > pos) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result9 !== null) {
              var result6 = [result8, result9];
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(a) { return a; })(result6[1])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedPos4 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result10 = parse_endline();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result10 === null) {
              var result8 = '';
            } else {
              var result8 = null;
              pos = savedPos4;
            }
            if (result8 !== null) {
              if (input.length > pos) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result9 !== null) {
                var result6 = [result8, result9];
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
            var result7 = result6 !== null
              ? (function(a) { return a; })(result6[1])
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(contents) {
            if (options.jinja) {
            return "{#- " + (contents || []).join("") + " -#}";
          }
          return "";
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[ 	]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(sp) {
            return sp.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endline() {
        var cacheKey = 'endline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "\n") {
          var result7 = "\n";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result7 !== null) {
          var result10 = parse_space();
          var result8 = result10 !== null ? result10 : '';
          if (result8 !== null) {
            var result9 = parse_endline();
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(end1, sp, end) {
            return options.inline
            ? " "
            : end1 + "" + sp + end;
          })(result5[0], result5[1], result5[2])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "\n") {
            var result2 = "\n";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\n\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
              return options.inline ? " " : "\n";
            })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var options, jinja_tags, current_indent, tag_stack, last_content, _ref, __repeatString = function(str, n){
      
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
      
    return r;
      
  };
      
  options = (_ref = arguments[2]) != null
      
    ? _ref
      
    : {};
      
  if (options.jinja || options.jinja_tags) {
      
    options.jinja_tags == null && (options.jinja_tags = eval("require('jinjs/lib/nodes').default_nodes"));
      
    jinja_tags = options.jinja_tags;
      
  }
      
  current_indent = 0;
      
  function set_indent(indent){
      
    return current_indent = indent;
      
  }
      
  tag_stack = [];
      
  function stack_tag(tag){
      
    return tag_stack.push({
      
      tag: tag,
      
      indent: current_indent
      
    });
      
  }
      
  function stack_block(block, spaceless){
      
    spaceless == null && (spaceless = "");
      
    return tag_stack.push({
      
      block: block,
      
      indent: current_indent,
      
      spaceless: spaceless
      
    });
      
  }
      
  function get_jinja_end(tag){
      
    var sp;
      
    sp = tag.spaceless;
      
    tag = jinja_tags[tag.name];
      
    if (tag != null && tag['until']) {
      
      return "{%" + sp + " " + tag['until'] + " " + sp + "%}";
      
    } else {
      
      return "";
      
    }
      
  }
      
  function check_tag_stack(opt_jinja_tag){
      
    var res, top_tag, first_popped, top;
      
    res = "";
      
    top_tag = null;
      
    first_popped = true;
      
    for (;;) {
      
      if (!tag_stack.length) {
      
        break;
      
      }
      
      top_tag = tag_stack.pop();
      
      if (current_indent <= top_tag.indent) {
      
        if (top_tag.tag) {
      
          if (!first_popped && !options.inline) {
      
            res += "\n" + __repeatString(" ", top_tag.indent);
      
          }
      
          res += top_tag.tag.closing();
      
          first_popped = false;
      
        } else {
      
          top = jinja_tags[top_tag.block];
      
          if (opt_jinja_tag == null || top.inside == null || current_indent < top_tag.indent || (top.inside != null && !(opt_jinja_tag in top.inside))) {
      
            if (!options.inline) {
      
              res += "\n" + __repeatString(" ", top_tag.indent);
      
            }
      
            res += "{%" + top_tag.spaceless + " " + top['until'] + " " + top_tag.spaceless + "%}";
      
          } else {
      
            tag_stack.push(top_tag);
      
            break;
      
          }
      
        }
      
      } else {
      
        tag_stack.push(top_tag);
      
        break;
      
      }
      
    }
      
    return res;
      
  }
      
  function mod_class(ident){
      
    var res;
      
    res = {};
      
    res[",class"] = [ident];
      
    return res;
      
  }
      
  function merge_modifiers(prev, new_one){
      
    var x;
      
    if (new_one[",class"]) {
      
      prev[",class"] = prev[",class"] || [];
      
      prev[",class"] = prev[",class"].concat(new_one[",class"]);
      
      delete new_one[",class"];
      
    }
      
    for (x in new_one) {
      
      if (new_one.hasOwnProperty(x)) {
      
        prev[x] = new_one[x];
      
      }
      
    }
      
    return prev;
      
  }
      
  function Tag(that){
      
    function format_modifiers(mods){
      
      var s, x;
      
      s = "";
      
      for (x in mods) {
      
        if (mods.hasOwnProperty(x) && x != ",class") {
      
          if (mods[x]) {
      
            s += " " + x + "=\"" + mods[x] + "\"";
      
          } else {
      
            s += " " + x;
      
          }
      
        }
      
      }
      
      if (mods[",class"]) {
      
        s += " class=\"" + mods[",class"].join(" ") + "\"";
      
        delete mods[",class"];
      
      }
      
      return s;
      
    }
      
    that.opening = function(){
      
      return "<" + that.name + format_modifiers(that.mods) + ">";
      
    };
      
    that.selfclose = function(){
      
      return "<" + that.name + format_modifiers(that.mods) + "/>";
      
    };
      
    that.closing = function(){
      
      return "</" + that.name + ">";
      
    };
      
    return that;
      
  }
      
  last_content = null;
      
  function push_contents(contents){
      
    return last_content = contents;
      
  }
      
  function check_contents(end){
      
    var tmp;
      
    if (!options.inline) {
      
      return end;
      
    }
      
    if (!last_content) {
      
      return "";
      
    }
      
    tmp = last_content;
      
    last_content = null;
      
    if (options.inline && !tmp) {
      
      return "";
      
    }
      
    return end;
      
  }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})(); var _parse = module.exports.parse; module.exports.parse = function (input, startRule, options) {if (startRule instanceof Object) { options = startRule; startRule = undefined; }return _parse (input, startRule, options);};