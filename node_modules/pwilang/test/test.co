#!/usr/bin/env coco
{ parse } = require \../lib/grammar

{ fail, ok, equal, notEqual, deepEqual, notDeepEqual, strictEqual, notStrictEqual, throws, doesNotThrow, ifError } = require \assert

optimist = require \optimist
    .usage "$0: run the test suite."
    .alias \verbose, \v
    .alias \help, \h
    .describe \verbose, "Show all the tests"
    .describe \help, "You're staring at it"
{ argv } = optimist

suite = require \vows .describe "Pwilang Test Suite"

suite.addBatch do
    "Comments": do
        "start at a # and go to the end of the line.": ->
            equal "Hello", parse "Hello# World"

        "don't mess up strings": ->
            equal "<div attr=\"\#hepa\"></div>", parse "@div attr='\#hepa'"

        "don't interfere with id setting": ->
            equal "<div id=\"id\">hey </div>", parse "@div \#id hey # comment"

    "Full line tags": do
        "take a full line": -> 
            equal "<p>hello world</p>", parse "@p hello world"

        "can be indented": ->
            equal "<div>\n <p></p></div>", parse "@div\n @p"

    "Attributes": do
        "can be declared with backslashes": ->
            equal "<input checked/>", parse "@/input \\checked"

        "can be surrounded by single quotes": ->
            equal "<div attr=\"@value\"></div>", parse "@div attr='@value'"

    "In Jinja Mode": do
        "tag blocks can be defined with a leading %": ->
            equal "{%- raw -%}", parse "% raw", jinja: true

        "tag that have an until clause close automatically": ->
            equal "{%- block foo -%}{%- endblock -%}", parse "% block foo", jinja: true

        "blocks can be on the same line as other content": ->
            equal "<div>{%- block contents -%}{%- endblock -%}</div>",
                parse "@div % block contents", jinja: true

        "blocks can be in an inline tag.": ->
            equal "<div><h1>{%- block title -%}{%- endblock -%}</h1> Hello World</div>",
                parse "@div @h1 [% block title] Hello World", jinja: true

        "original blocks stay the same": ->
            equal "{% b %}", parse "{% b %}", jinja: true

        "has variables !": ->
            equal "{{ foo }}", parse "$foo", jinja: true

        "has variables inside tags": ->
            equal "<p>{{ foo }}</p>", parse "@p $foo", jinja: true

        "variables can be inside quoted attributes": ->
            equal "<a title=\"{{ title }} hello\"></a>", parse "@a title=\"$title hello\"", jinja: true

        "variables can be unquoted attributes": ->
            equal "<a title=\"{{ title }}\"></a>", parse "@a title=$title", jinja: true

        "variables can have dots": ->
            equal "<a title=\"{{ title.title }}\"></a>", parse "@a title=$title.title", jinja: true

        "variables can have parenthesis": ->
            equal "<a title=\"{{ title(toto) }}\"></a>", parse "@a title=$title(toto)", jinja: true

        "variables can have brackets": ->
            equal "<a title=\"{{ title[toto] }}\"></a>", parse "@a title=$title[toto]", jinja: true

        "variables can have brackets AND parenthesis": ->
            equal "<a title=\"{{ title[toto(3)] }}\"></a>", parse "@a title=$title[toto(3)]", jinja: true

        "variables can be surrounded by parenthesis": ->
            equal "{{ v }}", parse "$(v)", jinja: true
            equal "{{  v  }}", parse "$( v )", jinja: true

        "variables in parenthesis allow for more complex expressions": ->
            equal "{{ v + 1 }}", parse "$(v + 1)", jinja: true

        "variables can contain filters": ->
            equal "{{ v|f }}", parse "$v|f", jinja: true

        "variables can have multiple filters": ->
            equal "{{ v|f|f }}", parse "$v|f|f", jinja: true

        "variables can chain": ->
            equal "{{ a }}{{ b }}", parse "$a$b", jinja: true

        "classes can have variables": ->
            equal "<a class=\"c{{ c1 }} {{ c2 }}\"></a>", parse "@a .c$c1 .$c2", jinja: true

        "ids can have variables": ->
            equal "<a id=\"{{ id }}\"></a>", parse "@a \#$id", jinja: true

        "attributes can have variables": ->
            equal "<a {{ a }}=\"{{ c }}\" {{ b }}></a>", parse "@a $a=$c \\$b", jinja: true

        "do not interfere with indentation": ->
            equal "<p>\n  {%- if toto -%}\n    hello !{%- endif -%}</p>", parse "@p\n  % if toto\n    hello !", jinja: true

        "allow inside tags to show up before their until clause": ->
            equal "<p>\n  {%- if toto -%}\n    hello !\n  {%- else -%}\n    world.{%- endif -%}</p>", 
                parse "@p\n  % if toto\n    hello !\n  % else\n    world.", jinja: true

        "variables can nest parenthesis": ->
            equal "{{ a()(b()) }}", parse "$a()(b())", jinja: true
            equal "{{ toto()() }}", parse "$(toto()())", jinja: true

        "variables don't go too far": ->
            equal "adfaft{{ tptp(to)(df) }}toto", parse "adfaft$(tptp(to)(df))toto", jinja: true

        "jinja comments are left alone": ->
            equal "Hello {# World #}", parse "Hello {# World #}", jinja: true
            equal "end of comment #}", parse "end of comment #}", jinja: true

        "jinja ifs can be imbricated": ->
            equal "{%- if a -%}\n  {%- if b -%}\n  {%- else -%}{%- endif -%}\n{%- else -%}{%- endif -%}", parse "% if a\n  % if b\n  % else\n% else", jinja: true
            

if argv.help
    console.log optimist.usage()
    process.exit 0

if argv.verbose
    suite.run reporter: require \vows/lib/vows/reporters/spec
else
    suite.run()
