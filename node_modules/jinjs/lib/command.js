#!/usr/bin/env node
(function(){
  var optimist, argv, fs, sys, defaultEnvironment, context, str, file, data, _ref, _i, _len;
  optimist = require("optimist").usage("Transform a JinJS formatted file or stdin to a javascript function\n or execute it directly with a given context.\nUsage: $0 [options] file\n       $0 [options]").boolean("help").alias("help", "h").alias("filter_exp", "f").alias("require_exp", "r").alias("util_exp", 'u').alias("context", "c").alias("cocontext", "t").describe('context', "Give a JSON object as context").describe('cocontext', "Give a Coco object as context").describe("help", "Show this help");
  argv = optimist.argv;
  fs = require("fs");
  sys = require("util");
  defaultEnvironment = require("./environment").defaultEnvironment;
  if (argv.help) {
    console.log(optimist.help());
    process.exit(0);
  }
  defaultEnvironment.require_exp = (_ref = argv.require_exp) != null ? _ref : "require";
  function compile(string){
    return defaultEnvironment.getTemplateSourceFromString(string);
  }
  if (argv.context) {
    context = eval("obj = " + ((_ref = argv.context) != null ? _ref : '{}') + ";");
  }
  if (argv.cocontext) {
    str = "obj = " + require("coco").compile(argv.cocontext, {
      bare: true
    });
    context = eval(str);
  }
  if (context) {
    defaultEnvironment.filter_exp = "require('./filters')";
  }
  function result(data){
    var m;
    if (!context) {
      return sys.print(data);
    } else {
      m = eval("(function(){" + data + " return exports;})()");
      return sys.print(m.render(context));
    }
  }
  if (argv._.length > 0) {
    for (_i = 0, _len = (_ref = argv._).length; _i < _len; ++_i) {
      file = _ref[_i];
      fs.readFile(file, 'utf-8', _fn);
    }
  } else {
    process.stdin.resume();
    process.stdin.setEncoding("utf-8");
    data = "";
    process.stdin.on("data", function(chunk){
      return data += chunk;
    });
    process.stdin.on("end", function(){
      return result(compile(data));
    });
  }
  function _fn(err, data){
    if (err) {
      console.warn(err.message);
      return;
    }
    return result(compile(data));
  }
}).call(this);
