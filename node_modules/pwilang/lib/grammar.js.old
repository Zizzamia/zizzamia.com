module.exports = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "any": parse_any,
        "any_inline": parse_any_inline,
        "anything": parse_anything,
        "anything_dquoted": parse_anything_dquoted,
        "anything_inline": parse_anything_inline,
        "anything_squoted": parse_anything_squoted,
        "endline": parse_endline,
        "identifier": parse_identifier,
        "jinja_tag_inline": parse_jinja_tag_inline,
        "jinja_tag_inline_eol": parse_jinja_tag_inline_eol,
        "jinja_variable": parse_jinja_variable,
        "line": parse_line,
        "lines": parse_lines,
        "mod": parse_mod,
        "mod_ident": parse_mod_ident,
        "mod_ident_rec": parse_mod_ident_rec,
        "modifiers": parse_modifiers,
        "selfclosing_tag": parse_selfclosing_tag,
        "space": parse_space,
        "tag": parse_tag,
        "tag_inline": parse_tag_inline,
        "tag_to_eol": parse_tag_to_eol,
        "tag_to_eol_inline": parse_tag_to_eol_inline,
        "toplevel": parse_toplevel,
        "unquoted_contents": parse_unquoted_contents,
        "unquoted_contents_rec": parse_unquoted_contents_rec,
        "variable_any_bracket": parse_variable_any_bracket,
        "variable_any_bracket_rec": parse_variable_any_bracket_rec,
        "variable_any_paren": parse_variable_any_paren,
        "variable_any_paren_rec": parse_variable_any_paren_rec,
        "variable_contents": parse_variable_contents,
        "variable_contents_rec": parse_variable_contents_rec,
        "variable_ident": parse_variable_ident
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "toplevel";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_toplevel() {
        var cacheKey = 'toplevel@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_lines();
        var result4 = result5 !== null
          ? (function(lines) {
            set_indent(0);
          return lines + (check_tag_stack() + "");
          })(result5)
          : null;
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_space();
          var result2 = result3 !== null ? result3 : '';
          var result1 = result2 !== null
            ? (function(sp) {
              return sp;
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lines() {
        var cacheKey = 'lines@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_line();
        if (result4 !== null) {
          var result5 = parse_lines();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(line, lines) {
            return line + lines;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_line();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_line() {
        var cacheKey = 'line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var result45 = parse_endline();
        var result39 = result45 !== null ? result45 : '';
        if (result39 !== null) {
          var result44 = parse_space();
          var result40 = result44 !== null ? result44 : '';
          if (result40 !== null) {
            var result41 = parse_tag_inline();
            if (result41 !== null) {
              var result43 = parse_anything();
              var result42 = result43 !== null ? result43 : '';
              if (result42 !== null) {
                var result38 = [result39, result40, result41, result42];
              } else {
                var result38 = null;
                pos = savedPos4;
              }
            } else {
              var result38 = null;
              pos = savedPos4;
            }
          } else {
            var result38 = null;
            pos = savedPos4;
          }
        } else {
          var result38 = null;
          pos = savedPos4;
        }
        var result37 = result38 !== null
          ? (function(end, sp, tag, contents) {
            var res;
          set_indent(sp.length);
          res = check_tag_stack() + "" + check_contents(end) + (options.inline ? "" : sp) + tag + contents;
          push_contents(tag + "" + contents);
          return res;
          })(result38[0], result38[1], result38[2], result38[3])
          : null;
        if (result37 !== null) {
          var result0 = result37;
        } else {
          var savedPos3 = pos;
          var result36 = parse_endline();
          var result30 = result36 !== null ? result36 : '';
          if (result30 !== null) {
            var result35 = parse_space();
            var result31 = result35 !== null ? result35 : '';
            if (result31 !== null) {
              var result32 = parse_tag();
              if (result32 !== null) {
                var result34 = parse_anything();
                var result33 = result34 !== null ? result34 : '';
                if (result33 !== null) {
                  var result29 = [result30, result31, result32, result33];
                } else {
                  var result29 = null;
                  pos = savedPos3;
                }
              } else {
                var result29 = null;
                pos = savedPos3;
              }
            } else {
              var result29 = null;
              pos = savedPos3;
            }
          } else {
            var result29 = null;
            pos = savedPos3;
          }
          var result28 = result29 !== null
            ? (function(end, sp, tag, contents) {
              var res;
            set_indent(sp.length);
            res = check_tag_stack() + "" + check_contents(end) + (options.inline ? "" : sp) + tag.opening() + contents;
            stack_tag(tag);
            push_contents(contents);
            return res;
            })(result29[0], result29[1], result29[2], result29[3])
            : null;
          if (result28 !== null) {
            var result0 = result28;
          } else {
            var savedPos2 = pos;
            var result15 = (function() { return options.jinja; })() ? '' : null;
            if (result15 !== null) {
              var result27 = parse_endline();
              var result16 = result27 !== null ? result27 : '';
              if (result16 !== null) {
                var result26 = parse_space();
                var result17 = result26 !== null ? result26 : '';
                if (result17 !== null) {
                  if (input.substr(pos, 1) === "%") {
                    var result18 = "%";
                    pos += 1;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"%\"");
                    }
                  }
                  if (result18 !== null) {
                    if (input.substr(pos, 1) === "-") {
                      var result25 = "-";
                      pos += 1;
                    } else {
                      var result25 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"-\"");
                      }
                    }
                    var result19 = result25 !== null ? result25 : '';
                    if (result19 !== null) {
                      var result24 = parse_space();
                      var result20 = result24 !== null ? result24 : '';
                      if (result20 !== null) {
                        var result21 = parse_identifier();
                        if (result21 !== null) {
                          var result23 = parse_anything();
                          var result22 = result23 !== null ? result23 : '';
                          if (result22 !== null) {
                            var result14 = [result15, result16, result17, result18, result19, result20, result21, result22];
                          } else {
                            var result14 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result14 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
              } else {
                var result14 = null;
                pos = savedPos2;
              }
            } else {
              var result14 = null;
              pos = savedPos2;
            }
            var result13 = result14 !== null
              ? (function(end, sp, spaceless, ident, contents) {
                var sp, res;
              set_indent(sp.length);
              if (options.inline) {
                sp = "";
              }
              res = check_tag_stack() + "" + check_contents(end) + sp + "{%" + spaceless + " " + ident + contents + " " + spaceless + "%}";
              stack_block(ident);
              return res;
              })(result14[1], result14[2], result14[4], result14[6], result14[7])
              : null;
            if (result13 !== null) {
              var result0 = result13;
            } else {
              var savedPos1 = pos;
              var result12 = parse_endline();
              var result8 = result12 !== null ? result12 : '';
              if (result8 !== null) {
                var result11 = parse_space();
                var result9 = result11 !== null ? result11 : '';
                if (result9 !== null) {
                  var result10 = parse_anything();
                  if (result10 !== null) {
                    var result7 = [result8, result9, result10];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function(end, sp, contents) {
                  var sp, res;
                set_indent(sp.length);
                if (options.inline) {
                  sp = "";
                }
                res = check_tag_stack() + "" + check_contents(end) + sp + contents;
                push_contents(contents);
                return res;
                })(result7[0], result7[1], result7[2])
                : null;
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var savedPos0 = pos;
                var result3 = parse_endline();
                if (result3 !== null) {
                  var result5 = parse_space();
                  var result4 = result5 !== null ? result5 : '';
                  if (result4 !== null) {
                    var result2 = [result3, result4];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
                var result1 = result2 !== null
                  ? (function(end, sp) {
                    var sp;
                  set_indent(0);
                  if (options.inline) {
                    sp = "";
                  }
                  return check_tag_stack() + "" + check_contents(end) + sp;
                  })(result2[0], result2[1])
                  : null;
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[\-:a-zA-Z0-9_]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-:a-zA-Z0-9_]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[\-:a-zA-Z0-9_]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[\\-:a-zA-Z0-9_]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ident) {
            return ident[0] + ident[1].join("");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything() {
        var cacheKey = 'anything@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_any();
        if (result4 !== null) {
          var result5 = parse_anything();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_any();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_dquoted() {
        var cacheKey = 'anything_dquoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_any();
        if (result5 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "\"") {
            var result8 = "\"";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\"\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result8 === null) {
            var result6 = '';
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result7 = parse_anything_dquoted();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result4[0], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "\\\"") {
            var result2 = "\\\"";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\\\"\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_any();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_squoted() {
        var cacheKey = 'anything_squoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_any();
        if (result5 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "'") {
            var result8 = "'";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result8 === null) {
            var result6 = '';
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result7 = parse_anything_squoted();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result4[0], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "\\'") {
            var result2 = "\\'";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\'\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_any();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything_inline() {
        var cacheKey = 'anything_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_any_inline();
        if (result5 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "]") {
            var result8 = "]";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result8 === null) {
            var result6 = '';
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result7 = parse_anything_inline();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(any, anything) {
            return any + "" + anything;
          })(result4[0], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "\\]") {
            var result2 = "\\]";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\]\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_any_inline();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_inline() {
        var cacheKey = 'any_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\@") {
          var result12 = "\\@";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\@\"");
          }
        }
        var result11 = result12 !== null
          ? (function() {
            return '@';
          })()
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var result10 = parse_jinja_variable();
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var result9 = parse_jinja_tag_inline();
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var result8 = parse_tag_inline();
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var result7 = parse_tag_to_eol_inline();
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var result6 = parse_selfclosing_tag();
                  if (result6 !== null) {
                    var result0 = result6;
                  } else {
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    var result5 = parse_endline();
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result5 === null) {
                      var result3 = '';
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                    if (result3 !== null) {
                      if (input.length > pos) {
                        var result4 = input.charAt(pos);
                        pos++;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed('any character');
                        }
                      }
                      if (result4 !== null) {
                        var result2 = [result3, result4];
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                    var result1 = result2 !== null
                      ? (function(character) {
                        return character;
                      })(result2[1])
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any() {
        var cacheKey = 'any@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\@") {
          var result12 = "\\@";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\@\"");
          }
        }
        var result11 = result12 !== null
          ? (function() {
            return '@';
          })()
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var result10 = parse_jinja_variable();
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var result9 = parse_jinja_tag_inline_eol();
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var result8 = parse_tag_inline();
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var result7 = parse_tag_to_eol();
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var result6 = parse_selfclosing_tag();
                  if (result6 !== null) {
                    var result0 = result6;
                  } else {
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    var result5 = parse_endline();
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result5 === null) {
                      var result3 = '';
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                    if (result3 !== null) {
                      if (input.length > pos) {
                        var result4 = input.charAt(pos);
                        pos++;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed('any character');
                        }
                      }
                      if (result4 !== null) {
                        var result2 = [result3, result4];
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                    var result1 = result2 !== null
                      ? (function(character) {
                        return character;
                      })(result2[1])
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag() {
        var cacheKey = 'tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result2 = "@";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier();
          if (result3 !== null) {
            var result7 = parse_modifiers();
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result6 = parse_space();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ident, mods) {
            return Tag({
            name: ident,
            mods: mods
          });
          })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_to_eol() {
        var cacheKey = 'tag_to_eol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_tag();
        if (result2 !== null) {
          var result4 = parse_anything();
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(tag, anything) {
            return tag.opening() + "" + anything + tag.closing();
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_to_eol_inline() {
        var cacheKey = 'tag_to_eol_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_tag();
        if (result2 !== null) {
          var result4 = parse_anything_inline();
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(tag, anything) {
            return tag.opening() + "" + anything + tag.closing();
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_inline() {
        var cacheKey = 'tag_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result9 = parse_tag();
        if (result9 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result10 = "[";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result10 !== null) {
            var result13 = parse_space();
            var result11 = result13 !== null ? result13 : '';
            if (result11 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result12 = "]";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result12 !== null) {
                var result8 = [result9, result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function(tag, sp) {
            return tag.opening() + "" + sp + tag.closing();
          })(result8[0], result8[2])
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var result3 = parse_tag();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "[") {
              var result4 = "[";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_anything_inline();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result6 = "]";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(tag, contents) {
              return tag.opening() + "" + contents + tag.closing();
            })(result2[0], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_inline_eol() {
        var cacheKey = 'jinja_tag_inline_eol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() { return options.jinja; })() ? '' : null;
        if (result2 !== null) {
          if (input.substr(pos, 1) === "%") {
            var result3 = "%";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"%\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "-") {
              var result10 = "-";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            var result4 = result10 !== null ? result10 : '';
            if (result4 !== null) {
              var result9 = parse_space();
              var result5 = result9 !== null ? result9 : '';
              if (result5 !== null) {
                var result6 = parse_identifier();
                if (result6 !== null) {
                  var result8 = parse_anything();
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(spaceless, ident, contents) {
            return "{%" + spaceless + " " + ident + contents + " %}{% end" + ident + " " + spaceless + "%}";
          })(result1[2], result1[4], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_tag_inline() {
        var cacheKey = 'jinja_tag_inline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() { return options.jinja; })() ? '' : null;
        if (result2 !== null) {
          if (input.substr(pos, 1) === "%") {
            var result3 = "%";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"%\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "-") {
              var result10 = "-";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            var result4 = result10 !== null ? result10 : '';
            if (result4 !== null) {
              var result9 = parse_space();
              var result5 = result9 !== null ? result9 : '';
              if (result5 !== null) {
                var result6 = parse_identifier();
                if (result6 !== null) {
                  var result8 = parse_anything_inline();
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(spaceless, ident, contents) {
            return "{%" + spaceless + " " + ident + contents + " %}{% end" + ident + " " + spaceless + "%}";
          })(result1[2], result1[4], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selfclosing_tag() {
        var cacheKey = 'selfclosing_tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "@/") {
          var result2 = "@/";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@/\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier();
          if (result3 !== null) {
            var result7 = parse_modifiers();
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result6 = parse_space();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ident, mods) {
            return Tag({
            name: ident,
            mods: mods
          }).selfclose();
          })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_modifiers() {
        var cacheKey = 'modifiers@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_mod();
        if (result4 !== null) {
          var result5 = parse_modifiers();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(mod, modifiers) {
            return merge_modifiers(mod, modifiers);
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_mod();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mod_ident() {
        var cacheKey = 'mod_ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_mod_ident_rec();
        if (result4 !== null) {
          var result5 = parse_mod_ident();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(a, b) {
            return a + b;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_mod_ident_rec();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mod_ident_rec() {
        var cacheKey = 'mod_ident_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_identifier();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_jinja_variable();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mod() {
        var cacheKey = 'mod@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var result43 = parse_space();
        var result40 = result43 !== null ? result43 : '';
        if (result40 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result41 = ".";
            pos += 1;
          } else {
            var result41 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result41 !== null) {
            var result42 = parse_mod_ident();
            if (result42 !== null) {
              var result39 = [result40, result41, result42];
            } else {
              var result39 = null;
              pos = savedPos5;
            }
          } else {
            var result39 = null;
            pos = savedPos5;
          }
        } else {
          var result39 = null;
          pos = savedPos5;
        }
        var result38 = result39 !== null
          ? (function(ident) {
            return mod_class(ident);
          })(result39[2])
          : null;
        if (result38 !== null) {
          var result0 = result38;
        } else {
          var savedPos4 = pos;
          var result37 = parse_space();
          var result34 = result37 !== null ? result37 : '';
          if (result34 !== null) {
            if (input.substr(pos, 1) === "#") {
              var result35 = "#";
              pos += 1;
            } else {
              var result35 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result35 !== null) {
              var result36 = parse_mod_ident();
              if (result36 !== null) {
                var result33 = [result34, result35, result36];
              } else {
                var result33 = null;
                pos = savedPos4;
              }
            } else {
              var result33 = null;
              pos = savedPos4;
            }
          } else {
            var result33 = null;
            pos = savedPos4;
          }
          var result32 = result33 !== null
            ? (function(ident) {
              return {
              id: ident
            };
            })(result33[2])
            : null;
          if (result32 !== null) {
            var result0 = result32;
          } else {
            var savedPos3 = pos;
            var result31 = parse_space();
            var result25 = result31 !== null ? result31 : '';
            if (result25 !== null) {
              var result26 = parse_mod_ident();
              if (result26 !== null) {
                if (input.substr(pos, 2) === "=\"") {
                  var result27 = "=\"";
                  pos += 2;
                } else {
                  var result27 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\\\"\"");
                  }
                }
                if (result27 !== null) {
                  var result30 = parse_anything_dquoted();
                  var result28 = result30 !== null ? result30 : '';
                  if (result28 !== null) {
                    if (input.substr(pos, 1) === "\"") {
                      var result29 = "\"";
                      pos += 1;
                    } else {
                      var result29 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\\\"\"");
                      }
                    }
                    if (result29 !== null) {
                      var result24 = [result25, result26, result27, result28, result29];
                    } else {
                      var result24 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result24 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result24 = null;
                  pos = savedPos3;
                }
              } else {
                var result24 = null;
                pos = savedPos3;
              }
            } else {
              var result24 = null;
              pos = savedPos3;
            }
            var result23 = result24 !== null
              ? (function(ident, contents) {
                var r;
              r = {};
              r[ident] = contents;
              return r;
              })(result24[1], result24[3])
              : null;
            if (result23 !== null) {
              var result0 = result23;
            } else {
              var savedPos2 = pos;
              var result22 = parse_space();
              var result16 = result22 !== null ? result22 : '';
              if (result16 !== null) {
                var result17 = parse_mod_ident();
                if (result17 !== null) {
                  if (input.substr(pos, 2) === "='") {
                    var result18 = "='";
                    pos += 2;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"='\"");
                    }
                  }
                  if (result18 !== null) {
                    var result21 = parse_anything_squoted();
                    var result19 = result21 !== null ? result21 : '';
                    if (result19 !== null) {
                      if (input.substr(pos, 1) === "'") {
                        var result20 = "'";
                        pos += 1;
                      } else {
                        var result20 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"'\"");
                        }
                      }
                      if (result20 !== null) {
                        var result15 = [result16, result17, result18, result19, result20];
                      } else {
                        var result15 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result15 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos2;
                }
              } else {
                var result15 = null;
                pos = savedPos2;
              }
              var result14 = result15 !== null
                ? (function(ident, contents) {
                  var r;
                r = {};
                r[ident] = contents;
                return r;
                })(result15[1], result15[3])
                : null;
              if (result14 !== null) {
                var result0 = result14;
              } else {
                var savedPos1 = pos;
                var result13 = parse_space();
                var result9 = result13 !== null ? result13 : '';
                if (result9 !== null) {
                  var result10 = parse_mod_ident();
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === "=") {
                      var result11 = "=";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"=\"");
                      }
                    }
                    if (result11 !== null) {
                      var result12 = parse_unquoted_contents_rec();
                      if (result12 !== null) {
                        var result8 = [result9, result10, result11, result12];
                      } else {
                        var result8 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result7 = result8 !== null
                  ? (function(ident, contents) {
                    var r;
                  r = {};
                  r[ident] = contents;
                  return r;
                  })(result8[1], result8[3])
                  : null;
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var savedPos0 = pos;
                  var result6 = parse_space();
                  var result3 = result6 !== null ? result6 : '';
                  if (result3 !== null) {
                    if (input.substr(pos, 1) === "\\") {
                      var result4 = "\\";
                      pos += 1;
                    } else {
                      var result4 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\\\\\"");
                      }
                    }
                    if (result4 !== null) {
                      var result5 = parse_mod_ident();
                      if (result5 !== null) {
                        var result2 = [result3, result4, result5];
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                  var result1 = result2 !== null
                    ? (function(ident) {
                      var r;
                    r = {};
                    r[ident] = "";
                    return r;
                    })(result2[2])
                    : null;
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unquoted_contents_rec() {
        var cacheKey = 'unquoted_contents_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_unquoted_contents();
        if (result4 !== null) {
          var result5 = parse_unquoted_contents_rec();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(a, b) {
            return a + "" + b;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_unquoted_contents();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unquoted_contents() {
        var cacheKey = 'unquoted_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\ ") {
          var result4 = "\\ ";
          pos += 2;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\ \"");
          }
        }
        var result3 = result4 !== null
          ? (function() {
            return " ";
          })()
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_jinja_variable();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos).match(/^[^ \n	]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[^ \\n	]");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[ 	]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(sp) {
            return sp.join("");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endline() {
        var cacheKey = 'endline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\n") {
          var result5 = "\n";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          var result8 = parse_space();
          var result6 = result8 !== null ? result8 : '';
          if (result6 !== null) {
            var result7 = parse_endline();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(end1, sp, end) {
            return options.inline
            ? " "
            : end1 + "" + sp + end;
          })(result4[0], result4[1], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "\n") {
            var result2 = "\n";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\n\"");
            }
          }
          var result1 = result2 !== null
            ? (function() {
              return options.inline ? " " : "\n";
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jinja_variable() {
        var cacheKey = 'jinja_variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result9 = (function() { return options.jinja; })() ? '' : null;
        if (result9 !== null) {
          if (input.substr(pos, 1) === "$") {
            var result10 = "$";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result10 !== null) {
            var result11 = parse_variable_ident();
            if (result11 !== null) {
              var result13 = parse_variable_contents();
              var result12 = result13 !== null ? result13 : '';
              if (result12 !== null) {
                var result8 = [result9, result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function(ident, cnt) {
            return "{{ " + ident + cnt + " }}";
          })(result8[2], result8[3])
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var result3 = (function() { return options.jinja; })() ? '' : null;
          if (result3 !== null) {
            if (input.substr(pos, 2) === "$(") {
              var result4 = "$(";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"$(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_variable_contents();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(cnt) {
              return "{{ " + cnt + " }}";
            })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_contents() {
        var cacheKey = 'variable_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_variable_contents_rec();
        if (result4 !== null) {
          var result5 = parse_variable_contents();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(id, v) {
            return id + "" + v;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable_contents_rec();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_contents_rec() {
        var cacheKey = 'variable_contents_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 1) === ".") {
          var result20 = ".";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result20 !== null) {
          var result21 = parse_variable_contents();
          if (result21 !== null) {
            var result19 = [result20, result21];
          } else {
            var result19 = null;
            pos = savedPos3;
          }
        } else {
          var result19 = null;
          pos = savedPos3;
        }
        var result18 = result19 !== null
          ? (function(v) {
            return "." + v;
          })(result19[1])
          : null;
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "|") {
            var result16 = "|";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result16 !== null) {
            var result17 = parse_variable_contents();
            if (result17 !== null) {
              var result15 = [result16, result17];
            } else {
              var result15 = null;
              pos = savedPos2;
            }
          } else {
            var result15 = null;
            pos = savedPos2;
          }
          var result14 = result15 !== null
            ? (function(v) {
              return "|" + v;
            })(result15[1])
            : null;
          if (result14 !== null) {
            var result0 = result14;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "[") {
              var result10 = "[";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result10 !== null) {
              var result13 = parse_variable_any_bracket();
              var result11 = result13 !== null ? result13 : '';
              if (result11 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result12 = "]";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result12 !== null) {
                  var result9 = [result10, result11, result12];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
            var result8 = result9 !== null
              ? (function(a) {
                return "[" + a + "]";
              })(result9[1])
              : null;
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result7 = parse_variable_any_paren();
                var result5 = result7 !== null ? result7 : '';
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result6 !== null) {
                    var result3 = [result4, result5, result6];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
              var result2 = result3 !== null
                ? (function(a) {
                  return "(" + a + ")";
                })(result3[1])
                : null;
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_variable_ident();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_bracket() {
        var cacheKey = 'variable_any_bracket@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_variable_any_bracket_rec();
        if (result4 !== null) {
          var result5 = parse_variable_any_bracket();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(a, b) {
            return a + b;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable_any_bracket_rec();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_bracket_rec() {
        var cacheKey = 'variable_any_bracket_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\]") {
          var result12 = "\\]";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\]\"");
          }
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "[") {
            var result8 = "[";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result8 !== null) {
            var result11 = parse_variable_any_bracket();
            var result9 = result11 !== null ? result11 : '';
            if (result9 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result10 = "]";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          var result6 = result7 !== null
            ? (function(a) {
              return "[" + a + "]";
            })(result7[1])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "]") {
              var result5 = "]";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a) {
                return a;
              })(result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_paren() {
        var cacheKey = 'variable_any_paren@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_variable_any_paren_rec();
        if (result4 !== null) {
          var result5 = parse_variable_any_paren();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(a, b) {
            return a + b;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable_any_paren_rec();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_any_paren_rec() {
        var cacheKey = 'variable_any_paren_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\)") {
          var result12 = "\\)";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\)\"");
          }
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "(") {
            var result8 = "(";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result8 !== null) {
            var result11 = parse_variable_any_paren();
            var result9 = result11 !== null ? result11 : '';
            if (result9 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result10 = ")";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          var result6 = result7 !== null
            ? (function(a) {
              return "(" + a + ")";
            })(result7[1])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a) {
                return a;
              })(result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_ident() {
        var cacheKey = 'variable_ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(id) {
            return id[0] + "" + (id[1] ? id[1].join("") : "");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var options, current_indent, tag_stack, last_content, _ref;
      
  options = (_ref = arguments[2]) != null
      
    ? _ref
      
    : {};
      
  current_indent = 0;
      
  function set_indent(indent){
      
    return current_indent = indent;
      
  }
      
  tag_stack = [];
      
  function stack_tag(tag){
      
    return tag_stack.push({
      
      tag: tag,
      
      indent: current_indent
      
    });
      
  }
      
  function stack_block(block){
      
    return tag_stack.push({
      
      block: block,
      
      indent: current_indent
      
    });
      
  }
      
  function check_tag_stack(){
      
    var res, top_tag;
      
    res = "";
      
    top_tag = null;
      
    for (;;) {
      
      if (!tag_stack.length) {
      
        break;
      
      }
      
      top_tag = tag_stack.pop();
      
      if (current_indent <= top_tag.indent) {
      
        if (top_tag.tag) {
      
          res += top_tag.tag.closing();
      
        }
      
        if (top_tag.block) {
      
          res += "{% end" + top_tag.block + " %}";
      
        }
      
      } else {
      
        tag_stack.push(top_tag);
      
        break;
      
      }
      
    }
      
    return res;
      
  }
      
  function mod_class(ident){
      
    var res;
      
    res = {};
      
    res[",class"] = [ident];
      
    return res;
      
  }
      
  function merge_modifiers(prev, new_one){
      
    var x;
      
    if (new_one[",class"]) {
      
      prev[",class"] = prev[",class"] || [];
      
      prev[",class"] = prev[",class"].concat(new_one[",class"]);
      
      delete new_one[",class"];
      
    }
      
    for (x in new_one) {
      
      if (new_one.hasOwnProperty(x)) {
      
        prev[x] = new_one[x];
      
      }
      
    }
      
    return prev;
      
  }
      
  function Tag(that){
      
    function format_modifiers(mods){
      
      var s, x;
      
      s = "";
      
      for (x in mods) {
      
        if (mods.hasOwnProperty(x) && x != ",class") {
      
          if (mods[x]) {
      
            s += " " + x + "=\"" + mods[x] + "\"";
      
          } else {
      
            s += " " + x;
      
          }
      
        }
      
      }
      
      if (mods[",class"]) {
      
        s += " class=\"" + mods[",class"].join(" ") + "\"";
      
        delete mods[",class"];
      
      }
      
      return s;
      
    }
      
    that.opening = function(){
      
      return "<" + that.name + format_modifiers(that.mods) + ">";
      
    };
      
    that.selfclose = function(){
      
      return "<" + that.name + format_modifiers(that.mods) + "/>";
      
    };
      
    that.closing = function(){
      
      return "</" + that.name + ">";
      
    };
      
    return that;
      
  }
      
  last_content = null;
      
  function push_contents(contents){
      
    return last_content = contents;
      
  }
      
  function check_contents(end){
      
    var tmp;
      
    if (!options.inline) {
      
      return end;
      
    }
      
    if (!last_content) {
      
      return "";
      
    }
      
    tmp = last_content;
      
    last_content = null;
      
    if (options.inline && !tmp) {
      
      return "";
      
    }
      
    return end;
      
  }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})(); var _parse = module.exports.parse; module.exports.parse = function (input, startRule, options) {if (startRule instanceof Object) { options = startRule; startRule = undefined; }return _parse (input, startRule, options);};