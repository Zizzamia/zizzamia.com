/**
    Pwilang parser definitions.

    @author Christophe Eymard <christophe@ravelsoft.com>
*/

->
    options = arguments.2 ? {}

    if options.jinja or options.jinja_tags
        options.jinja_tags ?= eval "require('jinjs/lib/nodes').default_nodes"
        { jinja_tags } = options

    current_indent = 0

    function set_indent(indent)
        current_indent := indent

    tag_stack = []
    function stack_tag(tag)
        tag_stack.push tag: tag, indent: current_indent

    function stack_block (block, spaceless ? "")
        tag_stack.push block: block, indent: current_indent, spaceless: spaceless

    function get_jinja_end(tag)
        sp = tag.spaceless
        tag = jinja_tags[tag.name]
        if tag? and tag.\until
            return "{%#sp #{tag.\until} #sp%}"
        else
            return ""

    function check_tag_stack (opt_jinja_tag)
        res = ""
        top_tag = null
        first_popped = true

        while true
            if not tag_stack.length
                break
            top_tag = tag_stack.pop()
            if current_indent <= top_tag.indent
                if top_tag.tag
                    if not first_popped and not options.inline
                        res += "\n" + (" " * top_tag.indent)
                    res += top_tag.tag.closing() 
                    first_popped = false
                else
                    top = jinja_tags[top_tag.block]
                    if not opt_jinja_tag? or not top.inside? or current_indent < top_tag.indent or (top.inside? and opt_jinja_tag not in top.inside)
                        if not options.inline
                            res += "\n#{" " * top_tag.indent}"
                        res += "{%#{top_tag.spaceless} #{top.\until} #{top_tag.spaceless}%}"
                    else
                        tag_stack.push top_tag
                        break
            else
                tag_stack.push top_tag
                break

        return res

    function mod_class (ident)
        res = {}
        res[",class"] = [ ident ]
        return res


    function merge_modifiers (prev, new_one)
        # New one has priority
        if new_one[",class"]
            prev[",class"] = prev[",class"] or []
            prev[",class"] = prev[",class"].concat new_one[",class"]
            delete new_one[",class"]

        for x in new_one
            if new_one.hasOwnProperty x
                prev[x] = new_one[x]

        return prev


    function Tag (that)

        function format_modifiers (mods)
            s = ""

            for x in mods
                if mods.hasOwnProperty x and x != ",class"
                    if mods[x]
                        s += " #{x}=\"#{mods[x]}\""
                    else
                        s += " #{x}"

            if mods[",class"]
                s += " class=\"#{mods[",class"].join (" ")}\""
                delete mods[",class"]

            return s

        that.opening = ->
            "<#{that.name}#{format_modifiers that.mods}>"


        that.selfclose = ->
            "<#{that.name}#{format_modifiers that.mods}/>"


        that.closing = ->
            return "</#{that.name}>"

        return that


    last_content = null
    function push_contents (contents)
        last_content := contents
    function check_contents (end)
        if not options.inline
            return end

        if not last_content
            return ""
        tmp = last_content
        last_content := null
        if options.inline and not tmp
            return ""
        return end


toplevel
    = lines:lines -> set_indent 0; return lines + "#{check_tag_stack()}"
    / sp:space? -> return sp

lines
    = line:line lines:lines -> return line + lines
    / line:line

line
    # First, try to match inline tags
    = end:endline? sp:space? tag:tag_inline contents:anything? ->
         set_indent sp.length
         res = "#{check_tag_stack()}#{check_contents end}#{if options.inline then "" else sp}#{tag}#{contents}"
         push_contents "#{tag}#{contents}"
         return res

    / end:endline? sp:space? mods:modifiers space? contents:anything? ->
        set_indent sp.length
        tag = new Tag name: "div", mods: mods
        res = "#{check_tag_stack()}#{check_contents end}#{if options.inline then "" else sp}#{tag.opening()}#{contents}"
        stack_tag tag
        push_contents contents
        return res


    # Then full line tags.
    / end:endline? sp:space? tag:tag contents:anything? ->
        set_indent sp.length
        res = "#{check_tag_stack()}#{check_contents end}#{if options.inline then "" else sp}#{tag.opening()}#{contents}"
        stack_tag tag
        push_contents contents
        return res

    # When in jinja mode, try to parse a single line operator.
    / end:endline? sp:space? tag:jinja_tag contents:anything? ->
        set_indent sp.length
        sp = "" if options.inline
        sl = tag.spaceless

        res = "#{check_tag_stack(tag.name)}#{check_contents end}#{sp}{%#sl #{tag.name}#{contents} #sl%}"

        if tag.name in jinja_tags and jinja_tags[tag.name].\until
            stack_block tag.name, tag.spaceless

        return res

    # If there was no tag, just parse contents
    / end:endline? sp:space? contents:anything ->
        set_indent sp.length
        sp = "" if options.inline
        res = "#{check_tag_stack()}#{check_contents end}#{sp}#{contents}"
        push_contents contents
        return res

    # Sometimes the end of the file can be empty.
    / end:endline sp:space? ->
        set_indent 0
        sp = "" if options.inline
        return "#{check_tag_stack()}#{check_contents end}#{sp}"

identifier
    = ident:([a-zA-Z_][-:a-zA-Z0-9_]*) -> return ident[0] + ident[1].join ""

anything
    = any:any anything:anything -> return "#{any}#{anything}"
    / any:any

anything_inline
    = any:any_inline !"]" anything:anything_inline -> return "#{any}#{anything}"
    / "\\]"
    / any:any_inline

any_inline
    = escaped
    / jinja_variable
    / jinja_tag_inline
    / tag_inline
    / tag_to_eol_inline
    / selfclosing_tag
    / !endline character:. -> return character

any
    = escaped
    / comment
    / jinja_variable
    / jinja_tag_inline_eol
    / tag_inline
    / tag_to_eol
    / selfclosing_tag
    / !endline character:. -> return character

escaped
    = "\\" a:[@%$\u007b ] -> return a
    / "{#" -> return "\u007b#"
    / "#}" -> return "#\u007d"

tag
    = "@" ident:identifier mods:modifiers? space? -> return Tag name: ident, mods: mods

tag_to_eol
    = tag:tag anything:anything? -> return "#{tag.opening()}#{anything}#{tag.closing()}"

tag_to_eol_inline
    = tag:tag anything:anything_inline? -> return "#{tag.opening()}#{anything}#{tag.closing()}"

tag_inline
    = tag:tag '[' sp:space? ']' -> return "#{tag.opening()}#{sp}#{tag.closing()}"
    / tag:tag '[' contents:anything_inline ']' -> return "#{tag.opening()}#{contents}#{tag.closing()}"

/**
    JINJA PART
**/

jinja_tag_contents
    = seq:(!endline a:.)+ -> if seq then return (item.1 for item of seq).join "" else return ""

jinja_tag_contents_inline
    = seq:(!endline !"]" a:.)+ -> if seq then return (item.2 for item of seq).join "" else return ""

jinja_tag_contents_original
    = seq:(!"%}" a:.)+ -> if seq then return (item.1 for item of seq).join "" else return ""

jinja_tag_original
    = &{ return options.jinja; } "{%" contents:jinja_tag_contents_original? "%}" ->
        return "{%#{contents}%}"

jinja_tag_inline_eol
    = jinja_tag_original
    / tag:jinja_tag contents:jinja_tag_contents? ->
        endtag = get_jinja_end tag
        return "{%- #{tag.name}#{contents} -%}#{endtag}"

jinja_tag_inline
    = jinja_tag_original
    / tag:jinja_tag contents:jinja_tag_contents_inline? ->
        endtag = get_jinja_end tag
        return "{%- #{tag.name}#{contents} -%}#{endtag}"

jinja_tag
    = &{ return options.jinja; } "%" end:"%"? sl:"-"? space? ident:identifier ->
        return { name: ident, spaceless: sl }

selfclosing_tag
    = "@/" ident:identifier mods:modifiers? space? -> return Tag name: ident, mods: mods .selfclose()

mod_ident
    = idents:(identifier / escaped / jinja_variable)+ -> return idents.join ""

# Modifiers are Ids, Classes and attributes, in short everything that will end up inside the tag.
modifiers
    = modifiers:(mod)+ -> 
        mods = modifiers[modifiers.length - 1]
        for i from modifiers.length - 2 to 0 by -1
            mods = merge_modifiers modifiers[i], mods
        return mods

mod
    = space? "\." ident:mod_ident -> return mod_class ident
    / space? "#" ident:mod_ident -> return id: ident
    / space? ident:mod_ident "=\"" contents:anything_dquoted? "\"" -> r = {}; r[ident] = contents; return r
    / space? ident:mod_ident "='" contents:anything_squoted? "'" -> r = {}; r[ident] = contents; return r
    / space? ident:mod_ident "=" contents:unquoted_contents -> r = {}; r[ident] = contents; return r
    / space? "\\" ident:mod_ident -> r = {}; r[ident] = ""; return r

anything_dquoted
    = string_contents:("\\\"" / escaped / jinja_variable / [^\"])+ -> return string_contents.join ""

anything_squoted
    = string_contents:("\\'" / escaped / [^\'])+ -> return string_contents.join ""

unquoted_contents
    = contents:(escaped / jinja_variable / [^ \n\t])+ -> return contents.join ""

jinja_variable
    = &{ return options.jinja; } "$" ident:variable_ident cnt:variable_contents? -> return "{{ #{ident}#{cnt} }}"
    / &{ return options.jinja; } "$(" cnt:variable_any_paren ")" -> return "{{ #{cnt} }}"

variable_contents
    = contents:(variable_contents_rec)+ -> return contents.join ""

variable_contents_rec
    = "." v:variable_contents -> return ".#{v}"
    / "|" v:variable_contents -> return "|#{v}"
    / "[" a:variable_any_bracket? "]" -> return "[#{a}]"
    / "(" a:variable_any_paren? ")" -> return "(#{a})"
    / variable_ident

variable_any_bracket
    = bracket_contents:("\\]" / "[" a:variable_any_bracket? "]" { return "[" + a + "]" } / !"]" a:. { return a })+ -> return bracket_contents.join ""

variable_any_paren
    = paren_contents: ("\\)" / "(" a:variable_any_paren? ")" { return "(" + a +")" } / !")" a:. { return a })+ -> return paren_contents.join ""

variable_ident
    = id:([a-zA-Z_][a-zA-Z0-9_]*) -> return "#{id.0}#{if id.1 then id.1.join "" else ""}"

comment
    = "#" contents:(!endline a:. { return a; })* -> 
        if options.jinja
            return "{#- #{(contents or []).join ""} -#}"
        return ""

space
    = sp:[ \t]+ -> return sp.join ""

endline
    = end1:"\n" sp:space? end:endline -> return if options.inline then " " else "#{end1}#{sp}#{end}"
    / "\n" -> return if options.inline then " " else "\n"

