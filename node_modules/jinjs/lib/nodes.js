(function(){
  var make_expression, make_parse_rule, parse_for, parse_let, parse_macro, parse_extends, parse_block, parse_import, parse_string, Node, NodeBasic, NodeComment, NodeList, NodePrint, NodeTag, NodeExtends, NodeImport, NodeFromImport, NodeInclude, NodeAbspath, NodeLet, NodeDo, NodeTagContainer, NodeMacro, NodeCall, NodeBlock, NodeElse, NodeElseIf, NodeElIf, NodeIf, NodeElseFor, NodeContinue, NodeBreak, NodeFor;
  make_expression = require('./expression').parse;
  make_parse_rule = function(rule_name){
    return function(contents, ctx){
      return make_expression(contents, rule_name, ctx);
    };
  };
  parse_for = make_parse_rule('tag_for');
  parse_let = make_parse_rule('tag_let');
  parse_macro = make_parse_rule('tag_macro');
  parse_extends = make_expression;
  parse_block = make_parse_rule('tag_block');
  parse_import = make_parse_rule('tag_import');
  parse_string = make_parse_rule('string');
  function trim(string){
    return !string
      ? ""
      : string.replace(/^\s*|\s*$/, '');
  }
  /**
   *  @param str  a string
   *  @returns    an escaped string suitable to be quoted.
   */
  function escape(str){
    return str.replace(/\\/g, '\\\\').replace(/["']/g, function(str){
      return "\\" + str;
    }).replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t');
  }
  function template_expr_is_string(expr){
    try {
      parse_string(expr);
      return true;
    } catch (e) {
      return false;
    }
  }
  /**
   *
   */
  Node = (function(){
    Node.displayName = 'Node';
    var prototype = Node.prototype, constructor = Node;
    function Node(specs){
      this.contents = (specs != null
        ? specs
        : {}).contents;
    }
    prototype.compile = (function(){
      function compile(){
        throw new Error("This function should never be called.");
      }
      return compile;
    }());
    prototype.ind = (function(){
      function ind(opts){
        var ind;
        opts.__indent__ == null && (opts.__indent__ = 0);
        opts.__indent__ = opts.__indent__ + 1;
        ind = opts.__indent__ * 4;
        return "\n" + __repeatString(" ", ind);
      }
      return ind;
    }());
    prototype.ded = (function(){
      function ded(opts){
        var ind;
        opts.__indent__ == null && (opts.__indent__ = 1);
        opts.__indent__ = opts.__indent__ - 1;
        ind = opts.__indent__ * 4;
        return "\n" + __repeatString(" ", ind);
      }
      return ded;
    }());
    prototype.cur = (function(){
      function cur(opts){
        var ind, _ref;
        ind = ((_ref = opts.__indent__) != null ? _ref : 0) * 4;
        return "\n" + __repeatString(" ", ind);
      }
      return cur;
    }());
    return Node;
  }());
  /**
   *
   */
  NodeBasic = (function(_super){
    NodeBasic.displayName = 'NodeBasic';
    var prototype = __extends(NodeBasic, _super).prototype, constructor = NodeBasic;
    function NodeBasic(specs){
      NodeBasic.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return "_res += '" + escape(this.contents) + "';";
      }
      return compile;
    }());
    prototype.append = (function(){
      function append(contents){
        return this.contents += contents;
      }
      return append;
    }());
    return NodeBasic;
  }(Node));
  NodeComment = (function(_super){
    NodeComment.displayName = 'NodeComment';
    var prototype = __extends(NodeComment, _super).prototype, constructor = NodeComment;
    function NodeComment(_arg){
      var _ref;
      this.contents = (_ref = _arg.contents) != null ? _ref : "";
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return "/*" + this.contents + "*/";
      }
      return compile;
    }());
    return NodeComment;
  }(Node));
  /**
   *  A collection of Nodes.
   */
  NodeList = (function(_super){
    NodeList.displayName = 'NodeList';
    var prototype = __extends(NodeList, _super).prototype, constructor = NodeList;
    function NodeList(specs){
      this.nodes = [];
      NodeList.superclass.apply(this, arguments);
    }
    prototype.push = (function(){
      function push(node){
        var last_node;
        if (node == null) {
          return;
        }
        if (typeof node == 'string') {
          last_node = this.nodes[this.nodes.length - 1];
          if (last_node instanceof NodeBasic) {
            return last_node.append(node);
          } else {
            return this.nodes.push(new NodeBasic({
              contents: node
            }));
          }
        } else {
          return this.nodes.push(node);
        }
      }
      return push;
    }());
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res, node, _i, _ref, _len;
        ctx == null && (ctx = {});
        res = "";
        for (_i = 0, _len = (_ref = this.nodes).length; _i < _len; ++_i) {
          node = _ref[_i];
          res += node.compile(opts, ctx);
        }
        return res;
      }
      return compile;
    }());
    return NodeList;
  }(Node));
  /**
   *
   */
  NodePrint = (function(_super){
    NodePrint.displayName = 'NodePrint';
    var prototype = __extends(NodePrint, _super).prototype, constructor = NodePrint;
    function NodePrint(specs){
      NodePrint.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return "_res += ((_ref = " + make_expression(this.contents, ctx) + ") !== undefined && _ref !== null ? _ref : '').toString();";
      }
      return compile;
    }());
    return NodePrint;
  }(Node));
  NodeTag = (function(_super){
    NodeTag.displayName = 'NodeTag';
    var prototype = __extends(NodeTag, _super).prototype, constructor = NodeTag;
    NodeTag.tag = '__tag__';
    function NodeTag(specs){
      NodeTag.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(){
        throw new JinJSUnimplementedException("The NodeTag is not meant to be used !");
      }
      return compile;
    }());
    prototype.toString = (function(){
      function toString(){
        return "Node: " + this.constructor.displayName;
      }
      return toString;
    }());
    return NodeTag;
  }(Node));
  /**
   *
   */
  NodeExtends = (function(_super){
    NodeExtends.displayName = 'NodeExtends';
    var prototype = __extends(NodeExtends, _super).prototype, constructor = NodeExtends;
    NodeExtends.tag = 'extends';
    function NodeExtends(specs){
      NodeExtends.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var tpl_name;
        opts['extends'] = true;
        tpl_name = parse_extends(this.contents, opts);
        if (template_expr_is_string(tpl_name)) {
          return "__extends__ = require(" + tpl_name + ");";
        } else {
          return "__extends__ = " + tpl_name + ";\nif (__extends__ === null || __extends__ === undefined) throw new Error ('Cant extend a null template.');";
        }
      }
      return compile;
    }());
    return NodeExtends;
  }(NodeTag));
  NodeImport = (function(_super){
    NodeImport.displayName = 'NodeImport';
    var prototype = __extends(NodeImport, _super).prototype, constructor = NodeImport;
    NodeImport.tag = 'import';
    function NodeImport(specs){
      NodeImport.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var tpl, as, imports, with_context, result;
        tpl = parse_import.tpl, as = parse_import.as, imports = parse_import.imports, with_context = parse_import.with_context;
        opts['clone'] = true;
        result = "(function(){\nvar __new_ctx = " + (!with_context ? '{}' : '__import({}, $$)') + ";\n// __new_ctx now gets populated with the new exported variables.\nrequire(" + tpl + ").render(__new_ctx);";
        if (as) {
          result += common + "$$." + as + " = __new_ctx;";
        } else {
          result += "var names = ['" + imports.join("', '") + "'];\nfor (var i = 0; i < names.length; i++) {\n    $$[names[i]] = __new_ctx[names[i]];\n}";
        }
        result += "})();";
        return result;
      }
      return compile;
    }());
    return NodeImport;
  }(NodeTag));
  NodeFromImport = (function(_super){
    NodeFromImport.displayName = 'NodeFromImport';
    var prototype = __extends(NodeFromImport, _super).prototype, constructor = NodeFromImport;
    NodeFromImport.tag = 'from';
    function NodeFromImport(specs){
      NodeFromImport.superclass.apply(this, arguments);
    }
    return NodeFromImport;
  }(NodeImport));
  /**
   *
   */
  NodeInclude = (function(_super){
    NodeInclude.displayName = 'NodeInclude';
    var prototype = __extends(NodeInclude, _super).prototype, constructor = NodeInclude;
    NodeInclude.tag = 'include';
    function NodeInclude(specs){
      NodeInclude.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var tpl_name, tpl_exp;
        tpl_name = parse_extends(this.contents, opts);
        if (template_expr_is_string(tpl_name)) {
          tpl_exp = "require(" + tpl_name + ")";
        } else {
          tpl_exp = tpl_name;
        }
        return "_res += (" + tpl_exp + ").render($$);";
      }
      return compile;
    }());
    return NodeInclude;
  }(NodeTag));
  NodeImport = (function(_super){
    NodeImport.displayName = 'NodeImport';
    var prototype = __extends(NodeImport, _super).prototype, constructor = NodeImport;
    NodeImport.tag = 'import';
    function NodeImport(specs){
      NodeImport.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var template, as_name, variables, with_context, tpl_exp, result, _ref;
        _ref = parse_import(this.contents, ctx), template = _ref.template, as_name = _ref.as_name, variables = _ref.variables, with_context = _ref.with_context;
        opts['clone'] = true;
        if (template_expr_is_string(template)) {
          tpl_exp = "require(" + template + ")";
        } else {
          tpl_exp = template;
        }
        result = "(function(){ ";
        if (with_context) {
          result += "var __new_ctx = __import({}, $$);\n// __new_ctx now gets populated with the new exported variables.\n(" + tpl_exp + ").render(__new_ctx);";
        } else {
          result += "var __new_ctx = (" + tpl_exp + ")._cached_ctx();";
        }
        if (as_name) {
          result += "$$." + as_name + " = __new_ctx;";
        } else {
          result += "var names = ['" + variables.join("', '") + "'];\nfor (var i = 0; i < names.length; i++) {\n    $$[names[i]] = __new_ctx[names[i]];\n}";
        }
        result += "})();";
        return result;
      }
      return compile;
    }());
    return NodeImport;
  }(NodeTag));
  NodeFromImport = (function(_super){
    NodeFromImport.displayName = 'NodeFromImport';
    var prototype = __extends(NodeFromImport, _super).prototype, constructor = NodeFromImport;
    NodeFromImport.tag = 'from';
    function NodeFromImport(specs){
      NodeFromImport.superclass.apply(this, arguments);
    }
    return NodeFromImport;
  }(NodeImport));
  NodeAbspath = (function(_super){
    NodeAbspath.displayName = 'NodeAbspath';
    var prototype = __extends(NodeAbspath, _super).prototype, constructor = NodeAbspath;
    NodeAbspath.tag = 'abspath';
    function NodeAbspath(specs){
      NodeAbspath.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var path;
        path = parse_string(this.contents, ctx);
        return "_res += _require('path').join(__dirname, " + path + ");";
      }
      return compile;
    }());
    return NodeAbspath;
  }(NodeTag));
  /**
   *
   */
  NodeLet = (function(_super){
    NodeLet.displayName = 'NodeLet';
    var prototype = __extends(NodeLet, _super).prototype, constructor = NodeLet;
    NodeLet.tag = 'let';
    function NodeLet(specs){
      NodeLet.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var variable_name, expression, res, _ref;
        _ref = parse_let(this.contents, ctx), variable_name = _ref.variable_name, expression = _ref.expression;
        ctx[variable_name] = true;
        return res = "var " + variable_name + " = ($$." + variable_name + " = " + expression + ");";
      }
      return compile;
    }());
    return NodeLet;
  }(NodeTag));
  NodeDo = (function(_super){
    NodeDo.displayName = 'NodeDo';
    var prototype = __extends(NodeDo, _super).prototype, constructor = NodeDo;
    NodeDo.tag = 'do';
    function NodeDo(specs){
      NodeDo.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return make_expression(this.contents, ctx) + ";";
      }
      return compile;
    }());
    return NodeDo;
  }(NodeTag));
  /**
   */
  NodeTagContainer = (function(_super){
    NodeTagContainer.displayName = 'NodeTagContainer';
    var prototype = __extends(NodeTagContainer, _super).prototype, constructor = NodeTagContainer;
    function NodeTagContainer(specs){
      NodeTagContainer.superclass.apply(this, arguments);
      this.child_node = specs.child_node;
    }
    prototype.child_code = (function(){
      function child_code(opts, ctx){
        var ind, _ref;
        ind = 0;
        return ((_ref = (_ref = this.child_node) != null ? _ref.compile(opts, ctx) : void 8) != null ? _ref : "").replace(/^/g, function(){
          ind = ind + 1;
          return ind == 1 ? "" : "    ";
        });
      }
      return child_code;
    }());
    return NodeTagContainer;
  }(NodeList));
  /**
   *
   */
  NodeMacro = (function(_super){
    NodeMacro.displayName = 'NodeMacro';
    var prototype = __extends(NodeMacro, _super).prototype, constructor = NodeMacro;
    NodeMacro.tag = 'macro';
    NodeMacro.until = 'endmacro';
    function NodeMacro(specs){
      NodeMacro.superclass.apply(this, arguments);
    }
    prototype.init_defaults = (function(){
      function init_defaults(opts, args){
        var res, a, _i, _len;
        res = "";
        for (_i = 0, _len = args.length; _i < _len; ++_i) {
          a = args[_i];
          if (a.default_value) {
            res += a.name + " = (" + a.name + " === undefined) ? (" + a.default_value + ") : " + a.name + ";";
          }
        }
        return res;
      }
      return init_defaults;
    }());
    prototype.compile = (function(){
      function compile(opts, ctx){
        var args, function_name, backup, argcode, argendcode, a, res, _ref, _i, _len;
        _ref = parse_macro(this.contents, ctx), args = _ref.args, function_name = _ref.function_name;
        args.push({
          name: "caller",
          default_value: "(function(){ return \"\"; })"
        });
        backup = [];
        argcode = [];
        argendcode = [];
        for (_i = 0, _len = args.length; _i < _len; ++_i) {
          a = args[_i];
          backup.push("__" + a.name + " = " + a.name);
          argcode.push("$$." + a.name + " = " + a.name);
          argendcode.push("if (__" + a.name + " !== undefined) $$." + a.name + " = __" + a.name + ";");
        }
        if (args) {
          backup = "var " + backup.join(",") + ";";
          argcode = argcode.join(",") + ";";
          argendcode = argendcode.join(" ");
        }
        res = "function " + function_name + "(" + (function(){
          var _i, _ref, _len, _results = [];
          for (_i = 0, _len = (_ref = args).length; _i < _len; ++_i) {
            a = _ref[_i];
            _results.push(a.name);
          }
          return _results;
        }()).join(", ") + ") {\n    var _res = '';\n    " + this.init_defaults(opts, args) + "\n    " + backup + "\n    " + argcode + "\n    " + this.child_code(opts, ctx) + "\n    " + argendcode + "\n    return _res;\n}\n$$." + function_name + " = " + function_name + ";";
        return res;
      }
      return compile;
    }());
    return NodeMacro;
  }(NodeTagContainer));
  NodeCall = (function(_super){
    NodeCall.displayName = 'NodeCall';
    var prototype = __extends(NodeCall, _super).prototype, constructor = NodeCall;
    NodeCall.tag = 'call';
    NodeCall.until = 'endcall';
    NodeCall.call_re = /([a-zA-Z$_0-9]+)\s*\(\s*(.*)\s*\)\s*/;
    function NodeCall(specs){
      NodeCall.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var m, fname, args, a, callerblock, thecall, _res, _i, _ref, _len;
        m = this.contents.match(NodeCall.call_re);
        if (!m) {
          throw new Error("call tag is malformed");
        }
        fname = m[1];
        args = m[2];
        _res = [];
        for (_i = 0, _len = (_ref = args.split(",")).length; _i < _len; ++_i) {
          a = _ref[_i];
          if (a) {
            _res.push(a.replace(/^\s*|\s*$/g, ''));
          }
        }
        args = _res;
        callerblock = "(function () {\n    var _res = '';\n    " + this.child_code(opts, ctx) + "\n    return _res;\n})";
        args.push(callerblock);
        args = args.join(", ");
        thecall = "_res += " + fname + "(" + args + ");";
        return thecall;
      }
      return compile;
    }());
    return NodeCall;
  }(NodeTagContainer));
  /**
   *
   */
  NodeBlock = (function(_super){
    NodeBlock.displayName = 'NodeBlock';
    var prototype = __extends(NodeBlock, _super).prototype, constructor = NodeBlock;
    NodeBlock.tag = 'block';
    NodeBlock.until = 'endblock';
    function NodeBlock(specs){
      NodeBlock.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var block_name, indent;
        block_name = parse_block(this.contents, ctx);
        opts.blocks == null && (opts.blocks = {});
        indent = opts.__indent__;
        opts.__indent__ = 4;
        opts.blocks[block_name] = this.child_code(opts, ctx) + "";
        opts.__indent__ = indent;
        return "// Adding the current block as the super of the currently defined block with the same name.\nif (_b['" + block_name + "'] !== undefined) {\n    _b['" + block_name + "'] = (function (original) {\n        return function ($$) {\n            var prevsuper = $$.super;\n            $$.super = function() {\n                return __block_" + block_name + "($$);\n            };\n            var res = original($$);\n            if (prevsuper !== undefined)\n                $$.super = prevsuper;\n            return res; };\n    })(_b['" + block_name + "']);\n} else { _b['" + block_name + "'] = __block_" + block_name + "; }\nif (__extends__ === null) _res += _b['" + block_name + "']($$);\n";
      }
      return compile;
    }());
    return NodeBlock;
  }(NodeTagContainer));
  NodeElse = (function(_super){
    NodeElse.displayName = 'NodeElse';
    var prototype = __extends(NodeElse, _super).prototype, constructor = NodeElse;
    NodeElse.tag = 'else';
    NodeElse.parse = (function(){
      function parse(pd){
        return new NodeElse({
          child_node: pd.child_node
        });
      }
      return parse;
    }());
    function NodeElse(specs){
      NodeElse.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res;
        res = "} else {";
        this.ind(opts);
        res += this.child_code(opts, ctx) + "";
        return res;
      }
      return compile;
    }());
    return NodeElse;
  }(NodeTagContainer));
  NodeElseIf = (function(_super){
    NodeElseIf.displayName = 'NodeElseIf';
    var prototype = __extends(NodeElseIf, _super).prototype, constructor = NodeElseIf;
    NodeElseIf.tag = 'elseif';
    NodeElseIf.inside = {
      elseif: NodeElseIf,
      'else': NodeElse
    };
    function NodeElseIf(specs){
      NodeElseIf.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res;
        if (!trim(this.contents)) {
          throw new Error("{% elseif <condition> %}: condition can't be empty.");
        }
        res = "} else if (" + make_expression(this.contents, ctx) + ") {";
        this.ind(opts);
        res += this.child_code(opts, ctx) + "";
        return res;
      }
      return compile;
    }());
    return NodeElseIf;
  }(NodeTagContainer));
  NodeElIf = (function(_super){
    NodeElIf.displayName = 'NodeElIf';
    var prototype = __extends(NodeElIf, _super).prototype, constructor = NodeElIf;
    NodeElIf.tag = 'elif';
    NodeElIf.inside = {
      elif: NodeElIf,
      'else': NodeElse
    };
    function NodeElIf(specs){
      NodeElIf.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res;
        if (!trim(this.contents)) {
          throw new Error("{% elif <condition> %}: condition can't be empty.");
        }
        res = "} else if (" + make_expression(this.contents, ctx) + ") {";
        this.ind(opts);
        res += this.child_code(opts, ctx) + "";
        return res;
      }
      return compile;
    }());
    return NodeElIf;
  }(NodeTagContainer));
  NodeIf = (function(_super){
    NodeIf.displayName = 'NodeIf';
    var prototype = __extends(NodeIf, _super).prototype, constructor = NodeIf;
    NodeIf.tag = 'if';
    NodeIf.until = 'endif';
    NodeIf.inside = {
      'else': NodeElse,
      elseif: NodeElseIf,
      elif: NodeElIf
    };
    function NodeIf(specs){
      NodeIf.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res;
        if (!trim(this.contents)) {
          throw new Error("{% if <condition> %}: condition can't be empty.");
        }
        res = "if (" + make_expression(this.contents, ctx) + ") {\n    " + this.child_code(opts, ctx) + "\n    " + NodeIf.superclass.prototype.compile.call(this, this, opts, ctx) + "\n}";
        return res;
      }
      return compile;
    }());
    return NodeIf;
  }(NodeTagContainer));
  NodeElseFor = (function(_super){
    NodeElseFor.displayName = 'NodeElseFor';
    var prototype = __extends(NodeElseFor, _super).prototype, constructor = NodeElseFor;
    NodeElseFor.tag = 'else';
    NodeElseFor.until = 'endfor';
    function NodeElseFor(specs){
      NodeElseFor.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var res;
        res = this.child_code(opts, ctx) + "";
        return res;
      }
      return compile;
    }());
    return NodeElseFor;
  }(NodeTagContainer));
  NodeContinue = (function(_super){
    NodeContinue.displayName = 'NodeContinue';
    var prototype = __extends(NodeContinue, _super).prototype, constructor = NodeContinue;
    NodeContinue.tag = 'continue';
    function NodeContinue(specs){
      NodeContinue.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return "continue;";
      }
      return compile;
    }());
    return NodeContinue;
  }(NodeTag));
  NodeBreak = (function(_super){
    NodeBreak.displayName = 'NodeBreak';
    var prototype = __extends(NodeBreak, _super).prototype, constructor = NodeBreak;
    NodeBreak.tag = 'break';
    function NodeBreak(specs){
      NodeBreak.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        return "break;";
      }
      return compile;
    }());
    return NodeBreak;
  }(NodeTag));
  NodeFor = (function(_super){
    NodeFor.displayName = 'NodeFor';
    var prototype = __extends(NodeFor, _super).prototype, constructor = NodeFor;
    NodeFor.tag = 'for';
    NodeFor.until = 'endfor';
    NodeFor.inside = {
      'else': NodeElseFor
    };
    function NodeFor(specs){
      NodeFor.superclass.apply(this, arguments);
    }
    prototype.compile = (function(){
      function compile(opts, ctx){
        var key, value, condition, k, v, l, _ref;
        _ref = parse_for(this.contents, ctx), key = _ref.key, value = _ref.value, condition = _ref.condition;
        opts.forblock = true;
        if (!value) {
          value = '';
        }
        k = "$$['" + key + "']";
        v = value ? "$$['" + value + "']" : "null";
        l = "$$.loop";
        return "(function() {\nvar _fref = " + condition + " || [], _prev_loop = " + l + ", _prev_key = " + k + ", _prev_value = " + v + ", k = null, v = null, i = 0, l = 0, x = null, last_v = null, last_k = null;\n" + l + " = { };\nif (_fref instanceof Array) {\n    l = _fref.length;\n    for (i = 0; i < l; i++) {\n        " + l + ".last = (i == l - 1);\n        " + l + ".first = (i == 0);\n        " + l + ".index0 = i;\n        " + l + ".index = i + 1;\n        " + k + " = _fref[i]; " + (value ? v + " = i;" : "") + "\n        " + this.child_code(opts, ctx) + "\n    }\n} else {\n    " + l + " = { first: true, last: false };\n    l = Object.keys(_fref).length;\n\n    for (x in _fref) { if (_fref.hasOwnProperty(x)) {\n        " + l + ".last = (i == l - 1);\n        " + k + " = x;\n        " + (value ? v + " = _fref[x];" : "") + "\n        " + l + ".index0 = i;\n        " + l + ".index = i + 1;\n        " + this.child_code(opts, ctx) + "\n        i += 1;\n        " + l + ".first = false;\n    } }\n}\nif (" + l + ".index == undefined) {\n    " + NodeFor.superclass.prototype.compile.call(this, this, opts, ctx) + "\n}\n" + l + " = _prev_loop; " + k + " = _prev_key; " + (value ? v + " = _prev_value;" : "") + "\n})();";
      }
      return compile;
    }());
    return NodeFor;
  }(NodeTagContainer));
  exports.NodeIf = NodeIf;
  exports.NodeDo = NodeDo;
  exports.NodeLet = NodeLet;
  exports.NodeFor = NodeFor;
  exports.NodeMacro = NodeMacro;
  exports.NodeList = NodeList;
  exports.NodeBasic = NodeBasic;
  exports.NodePrint = NodePrint;
  exports.NodeComment = NodeComment;
  exports.NodeExtends = NodeExtends;
  exports.NodeInclude = NodeInclude;
  exports.NodeImport = NodeImport;
  exports.NodeFromImport = NodeFromImport;
  exports.NodeContinue = NodeContinue;
  exports.NodeCall = NodeCall;
  exports.default_nodes = {
    'if': NodeIf,
    'do': NodeDo,
    'let': NodeLet,
    'for': NodeFor,
    'macro': NodeMacro,
    'extends': NodeExtends,
    'block': NodeBlock,
    'include': NodeInclude,
    'from': NodeFromImport,
    'import': NodeImport,
    'abspath': NodeAbspath,
    'continue': NodeContinue,
    'break': NodeBreak,
    'call': NodeCall
  };
  function __repeatString(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
  function __extends(sub, sup){
    function ctor(){} ctor.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new ctor).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
}).call(this);
