/**
    BEWARE : In this module, you can't have any require() out of the functions, nor
    can you use all of coco's shortcuts : all of these are meant to be used with .toString() !
**/
(function(){
  __import(exports, {
    /**
     * Return the absolute value of the argument.
     */
    $abs: (function(){
      function $abs(num){
        if (num < 0) {
          return -num;
        }
        return num;
      }
      return $abs;
    }())
    /**
     * A filter that batches items. It works pretty much like slice just the other way round. 
     * It returns a list of lists with the given number of items. 
     * If you provide a second parameter this is used to fill missing items.
     */,
    $batch: (function(){
      function $batch(value, linecount, fill_with){
        var result, i, tmpres, j, _to, _to2;
        fill_with == null && (fill_with = null);
        result = [];
        for (i = 0, _to = value.length - 1; linecount < 0 ? i >= _to : i <= _to; i += linecount) {
          tmpres = [];
          for (j = 0, _to2 = linecount - 1; j <= _to2; ++j) {
            if (!(i + j in value)) {
              if (fill_with == null) {
                break;
              }
              tmpres.push(fill_with);
            } else {
              tmpres.push(value[i + j]);
            }
          }
          result.push(tmpres);
        }
        return result;
      }
      return $batch;
    }())
    /**
     *  Capitalize a string.
     */,
    $capitalize: (function(){
      function $capitalize(str){
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
      }
      return $capitalize;
    }())
    /**
     *  Center monospaced text.
     */,
    $center: (function(){
      function $center(value, width){
        var leading;
        width == null && (width = 80);
        if (value.length >= width - 1) {
          return value;
        }
        leading = $repeat(" ", (width - value.length) / 2);
        return leading + value;
      }
      return $center;
    }()),
    $count: (function(){
      function $count(){
        return exports.length.apply(this, arguments);
      }
      return $count;
    }())
    /**
     *  Formats a date.
     *  TODO : not completely done.
     */,
    $date: (function(){
      function $date(d, format){
        var _pad;
        _pad = function(v){
          if (v < 10) {
            return "0" + v;
          }
          return v;
        };
        return format.replace(/%[%cdfHIjmMpSUwWxXyYzZ]/g, function(s){
          var y;
          switch (s[1]) {
          case 'c':
            return d.toLocaleDateString() + " " + d.toLocaleTimeString();
          case 'd':
            return _pad(d.getDate());
          case 'f':
            return d.getMilliseconds();
          case 'H':
            return _pad(d.getHours());
          case 'I':
            return _pad(d.getHours() % 12);
          case 'j':
            return '';
          case 'm':
            return _pad(d.getMonth() + 1);
          case 'M':
            return _pad(d.getMinutes());
          case 'p':
            return '';
          case 'S':
            return _pad(d.getSeconds());
          case 'U':
            return '';
          case 'w':
            return d.getDay();
          case 'W':
            return '';
          case 'x':
            return d.toLocaleDateString();
          case 'X':
            return d.toLocalTimeString();
          case 'y':
            y = d.getFullYear();
            return "" + _pad(Math.round((y / 100 - Math.floor(y / 100)) * 100));
          case 'Y':
            return d.getFullYear();
          case 'z':
            return d.getTimezoneOffset();
          case 'Z':
            try {
              return d.getTimezone();
            } catch (e) {
              return '';
            }
            break;
          case '%':
            return '%';
          default:
            return '#error';
          }
        });
      }
      return $date;
    }())
    /**
     *  Alias for default.
     */,
    $d: (function(){
      function $d(){
        return exports['default'].apply(this, arguments);
      }
      return $d;
    }())
    /**
     *  Return a default value.
     *  @param default_value: The value to return
     *      when `value` is null.
     */,
    $default: (function(){
      function $default(value, default_value){
        if (value == null) {
          return default_value;
        }
        return value;
      }
      return $default;
    }())
    /**
     *  Return a list with 
     */,
    $dictsort: (function(){
      function $dictsort(value, case_sensitive, _by){
        var result, k, v;
        case_sensitive == null && (case_sensitive = false);
        _by == null && (_by = 'key');
        result = [];
        for (k in value) {
          v = value[k];
          result.push([k, v]);
        }
        result.sort(function(a, b){
          var i;
          if (_by === 'value') {
            i = 1;
          } else {
            i = 0;
          }
          a = a[i];
          b = b[i];
          if (!case_sensitive) {
            a = a.toString().toUpperCase();
            b = b.toString().toUpperCase();
          }
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        });
        return result;
      }
      return $dictsort;
    }()),
    $e: {
      alias: "$escape"
    },
    $escape: (function(){
      function $escape(value){
        return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
      }
      return $escape;
    }())
    /**
     *  Escape a string to make it Javascript/JSON compliant.
     */,
    $escapejs: (function(){
      function $escapejs(value){
        var _unicode;
        _unicode = function(s){
          s = s.charCodeAt(0).toString(16);
          return "\\u" + $repeat("0", 4 - s.length) + s;
        };
        return value.replace(/./g, function(s){
          if (('a' <= s && s <= 'z') || ('A' <= s && s <= 'Z') || ('0' <= s && s <= '9')) {
            return s;
          }
          return _unicode(s);
        });
      }
      return $escapejs;
    }()),
    $filesizeformat: (function(){
      function $filesizeformat(value){
        var val, unit, strval;
        if (value < 1024) {
          return value + "";
        }
        if (value < 1024 * 1024) {
          val = val / 1024;
          unit = "Kb";
        } else if (value < 1024 * 1024 * 1024) {
          val = val / (1024 * 1024);
          unit = "Mb";
        } else {
          val = val / (1024 * 1024 * 1024);
          unit = "Gb";
        }
        strval = Math.round(val) + "";
        return val.toPrecision(strval.length + 3) + "Kb";
      }
      return $filesizeformat;
    }()),
    $first: (function(){
      function $first(arr){
        return arr != null ? arr[0] : void 8;
      }
      return $first;
    }()),
    $float: (function(){
      function $float(value){
        var res;
        res = parseFloat(value);
        if (res === NaN) {
          return 0.0;
        }
        return res;
      }
      return $float;
    }()),
    $forceescape: (function(){
      function $forceescape(value){
        throw new Error('unimplemented');
      }
      return $forceescape;
    }()),
    $format: (function(){
      function $format(value, args, kwargs){
        args == null && (args = []);
        kwargs == null && (kwargs = {});
        throw new Error('unimplemented');
      }
      return $format;
    }())
    /**
     *  NOTE: only usable in the {% for grouper, list %} notation.
     *  @param attribute: The attribute to group by.
     */,
    $groupby: (function(){
      function $groupby(arr, attribute){
        var result, obj, grouper, _i, _len;
        result = {};
        for (_i = 0, _len = arr.length; _i < _len; ++_i) {
          obj = arr[_i];
          grouper = $resolve_attr(obj, attribute);
          result[grouper] == null && (result[grouper] = []);
          result[grouper].push(obj);
        }
        return result;
      }
      return $groupby;
    }()),
    $in: (function(){
      function $in(obj, arr){
        var x;
        x = null;
        for (x in arr) {
          if (arr.hasOwnProperty(x) && obj === arr[x]) {
            return true;
          }
        }
        return false;
      }
      return $in;
    }()),
    $indent: (function(){
      function $indent(value, width, indentfirst){
        var first;
        width == null && (width = 4);
        indentfirst == null && (indentfirst = false);
        first = true;
        return value.replace(/^/gm, function(s){
          if (!first || indentfirst) {
            return $repeat(" ", width) + s;
          }
          first = false;
          return s;
        });
      }
      return $indent;
    }()),
    $join: (function(){
      function $join(arr, string, attribute){
        var o, _res, _i, _len;
        string == null && (string = "");
        attribute == null && (attribute = null);
        if ((arr != null ? arr.length : void 8) > 0) {
          if (attribute) {
            _res = [];
            for (_i = 0, _len = arr.length; _i < _len; ++_i) {
              o = arr[_i];
              _res.push($resolve_attr(o, attribute).toString());
            }
            arr = _res;
          }
          return arr.join(string);
        }
        return "";
      }
      return $join;
    }()),
    $last: (function(){
      function $last(arr){
        if (!(arr != null && arr.length)) {
          return null;
        }
        return arr[arr.length - 1];
      }
      return $last;
    }()),
    $length: (function(){
      function $length(arr){
        if (arr == null) {
          return 0;
        }
        return arr.length;
      }
      return $length;
    }()),
    $lower: (function(){
      function $lower(value){
        return value.toString().toLowerCase();
      }
      return $lower;
    }()),
    $pprint_: (function(){
      function $pprint_(node, fmter){
        function real_pprint(node, fmter, met){
          var index, is_array, props, k, v, i, prop, _len;
          met == null && (met = []);
          if (node instanceof Function) {
            return fmter('function', node);
          } else if (node instanceof RegExp) {
            return fmter('regexp', node);
          } else if (node instanceof Object) {
            index = met.indexOf(node);
            if (index != -1) {
              fmter('obj-already', index);
              return;
            }
            met.push(node);
            index = met.length - 1;
            is_array = node instanceof Array;
            fmter('obj-pre', is_array, index);
            props = [];
            for (k in node) {
              v = node[k];
              if (node.hasOwnProperty(k)) {
                if (v instanceof String) {
                  console.log(v);
                }
                props.push({
                  lbl: k,
                  node: v
                });
              }
            }
            props.sort(function(a, b){
              if (a < b) {
                return -1;
              }
              if (a > b) {
                return 1;
              }
              return 0;
            });
            for (i = 0, _len = props.length; i < _len; ++i) {
              prop = props[i];
              if (i != 0) {
                fmter('obj-sep');
              }
              if (!is_array) {
                fmter('obj-label', prop.lbl);
              }
              real_pprint(prop.node, fmter, met);
            }
            return fmter('obj-post', node instanceof Array);
          } else if (node instanceof String || typeof node === 'string') {
            return fmter('string', node);
          } else if (node instanceof Number || typeof node === 'number') {
            return fmter('number', node);
          } else if (node instanceof Boolean || typeof node === 'boolean') {
            return fmter('boolean', node);
          } else if (node == null) {
            return fmter('empty');
          }
        }
        return real_pprint(node, fmter);
      }
      return $pprint_;
    }()),
    $pprint: (function(){
      function $pprint(value, verbose, depth){
        var res;
        verbose == null && (verbose = false);
        depth == null && (depth = 0);
        res = [];
        $pprint_(value, function(type, node){
          switch (type) {
          case 'obj-pre':
            return res.push(node ? "[ " : "{ ");
          case 'obj-post':
            return res.push(node ? " ]" : " }");
          case 'obj-already':
            return res.push("[cycle]");
          case 'obj-sep':
            return res.push(", ");
          case 'obj-label':
            return res.push(node + ": ");
          case 'string':
            return res.push("\"" + node + "\"");
          case 'number':
            return res.push(node + "");
          case 'regexp':
            return res.push("/" + node + "/");
          case 'function':
            return res.push("[function]");
          case 'boolean':
            return res.push(node + "");
          case 'empty':
            return res.push("\u2205");
          default:
            return res.push(node);
          }
        });
        return res.join("");
      }
      return $pprint;
    }()),
    $hprint: (function(){
      function $hprint(value, verbose, depth){
        var unique, res, cur_depth, fmt;
        verbose == null && (verbose = false);
        depth == null && (depth = 0);
        unique = "hprint-" + Date.now();
        res = [];
        cur_depth = 0;
        res.push("<span class='hprint-value'>");
        fmt = (function(){
          function fmt(val, type, color, morestyle){
            morestyle == null && (morestyle = "");
            return "<span class='hprint-" + type + "' style='color:" + color + ";" + morestyle + "'>" + val + "</span>";
          }
          return fmt;
        }());
        $pprint_(value, function(type, node, index){
          if (type === 'obj-pre') {
            cur_depth = cur_depth + 1;
          }
          if (type === 'obj-post') {
            cur_depth = cur_depth - 1;
          }
          if (depth > 0 && cur_depth >= depth) {
            return;
          }
          switch (type) {
          case 'obj-pre':
            res.push(fmt(node ? "[ " : "{ ", 'open', 'gray', "font-weight: bold;"));
            return res.push("<span id='" + unique + "-" + index + "' class='hprint-object hprint-depth-" + cur_depth + "'>");
          case 'obj-post':
            res.push("</span>");
            return res.push(fmt(node ? " ]" : " }", 'close', 'gray', "font-weight: bold;"));
          case 'obj-already':
            return res.push(fmt("<a href='#" + unique + "-" + node + "'>[cycle]</a>", 'cycle', 'cyan'));
          case 'obj-sep':
            return res.push(", ");
          case 'obj-label':
            return res.push("<span class='hprint-label'>" + node + ": </span>");
          case 'string':
            return res.push(fmt("\"" + $escape(node) + "\"", 'string', 'goldenrod'));
          case 'number':
            return res.push(fmt(node + "", 'number', 'magenta'));
          case 'regexp':
            return res.push(fmt($escape(node.toString()) + "", 'regexp', 'lightgreen'));
          case 'function':
            return res.push(fmt("[function]", 'function', 'salmon'));
          case 'boolean':
            return res.push(fmt(node + "", 'boolean', 'magenta'));
          case 'empty':
            return res.push(fmt("\u2205", 'empty', 'magenta'));
          default:
            return res.push(node);
          }
        });
        res.push("</span>");
        return res.join("");
      }
      return $hprint;
    }()),
    $random: (function(){
      function $random(list){
        var index;
        if ((list != null ? list.length : void 8) > 0) {
          index = Math.floor(Math.random() * (list.length - 1) + 1);
          return list[index];
        }
        return "";
      }
      return $random;
    }()),
    $repeat: (function(){
      function $repeat(str, n){
        var r, i, _to;
        r = '';
        for (i = 0, _to = n - 1; i <= _to; ++i) {
          r += str;
        }
        return r;
      }
      return $repeat;
    }()),
    $replace: (function(){
      function $replace(string, regexp, newvalue, count){
        count == null && (count = null);
        if (typeof regexp === 'string') {
          regexp = new RegExp(regexp, 'g');
        }
        return string.replace(regexp, function(s){
          if (count != null) {
            if (count <= 0) {
              return s;
            }
            count = count - 1;
          }
          return s.replace(regexp, newvalue);
        });
      }
      return $replace;
    }()),
    $resolve_attr: (function(){
      function $resolve_attr(obj, att){
        var attrs, a, _i, _len;
        attrs = att.split('.');
        for (_i = 0, _len = attrs.length; _i < _len; ++_i) {
          a = attrs[_i];
          obj = obj[a];
        }
        return obj;
      }
      return $resolve_attr;
    }()),
    $reverse: (function(){
      function $reverse(arr){
        var new_arr;
        new_arr = arr.splice(0);
        new_arr.reverse();
        return new_arr;
      }
      return $reverse;
    }()),
    $round: (function(){
      function $round(value, precision, method){
        var factor;
        precision == null && (precision = 0);
        method == null && (method = 'common');
        if (method === 'common') {
          return value.toFixed(precision);
        } else {
          factor = Math.pow(10, precision);
          value *= factor;
          if (method === 'floor') {
            value = Math.floor(value);
          }
          if (method === 'ceil') {
            value = Math.ceil(value);
          }
          return (value / factor).toFixed(precision);
        }
      }
      return $round;
    }()),
    $safe: (function(){
      function $safe(value){
        throw new Error("Escaping is not yet implemented");
      }
      return $safe;
    }()),
    $slice: (function(){
      function $slice(value, slices, fill_with){
        var result, slice_length, i, tmpres, j, pos, _to, _to2;
        fill_with == null && (fill_with = null);
        result = [];
        slice_length = Math.ceil(value.length / slices);
        for (i = 0, _to = slices - 1; i <= _to; ++i) {
          tmpres = [];
          for (j = 0, _to2 = slice_length - 1; j <= _to2; ++j) {
            pos = i * slice_length + j;
            if (!(pos in value)) {
              if (fill_with == null) {
                break;
              }
              tmpres.push(fill_with);
            } else {
              tmpres.push(value[pos]);
            }
          }
          result.push(tmpres);
        }
        return result;
      }
      return $slice;
    }()),
    $sort: (function(){
      function $sort(value, reverse, case_sensitive, attribute){
        var new_arr;
        reverse == null && (reverse = false);
        case_sensitive == null && (case_sensitive = false);
        attribute == null && (attribute = null);
        new_arr = value.splice(0);
        new_arr.sort(function(a, b){
          if (attribute) {
            a = $resolve_attr(a, attribute);
            b = $resolve_attr(b, attribute);
          }
          if (!case_sensitive) {
            a = a.toString().toUpperCase();
            b = b.toString().toUpperCase();
          }
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        });
        if (reverse) {
          new_arr.reverse();
        }
        return new_arr;
      }
      return $sort;
    }()),
    $string: (function(){
      function $string(s){
        return s.toString();
      }
      return $string;
    }()),
    $striptags: (function(){
      function $striptags(val){
        return val.replace(/<('(\'|[^'])*'|"(\"|[^"])*"|[^>])+>/g, '');
      }
      return $striptags;
    }()),
    $sum: (function(){
      function $sum(container, attribute, start){
        var res, o, _i, _len;
        attribute == null && (attribute = null);
        start == null && (start = 0);
        res = 0;
        for (_i = 0, _len = container.length; _i < _len; ++_i) {
          o = container[_i];
          if (attribute) {
            res += $resolve_attr(o, attribute);
          } else {
            res += o;
          }
        }
        return res + start;
      }
      return $sum;
    }()),
    $title: (function(){
      function $title(s){
        var o;
        return (function(){
          var _i, _ref, _len, _results = [];
          for (_i = 0, _len = (_ref = s.split(/\s/)).length; _i < _len; ++_i) {
            o = _ref[_i];
            _results.push($capitalize(o));
          }
          return _results;
        }()).join(" ");
      }
      return $title;
    }()),
    $trim: (function(){
      function $trim(value){
        var _ref;
        return (_ref = value != null ? value.trim() : void 8) != null ? _ref : "";
      }
      return $trim;
    }()),
    $truncate: (function(){
      function $truncate(s, length, killwords, ellipsis){
        var end;
        length == null && (length = 255);
        killwords == null && (killwords = false);
        ellipsis == null && (ellipsis = '...');
        end = length - 1;
        if (end < s.length && !killwords) {
          while (end + 1 < s.length && !/\B/.test(s[end + 1])) {
            end += 1;
          }
        }
        if (end == s.length - 1) {
          ellipsis = "";
        }
        return s.slice(0, end + 1) + ellipsis;
      }
      return $truncate;
    }()),
    $upper: (function(){
      function $upper(value){
        return value.toString().toUpperCase();
      }
      return $upper;
    }()),
    $urlize: (function(){
      function $urlize(value, trim_url_limit, nofollow){
        trim_url_limit == null && (trim_url_limit = null);
        nofollow == null && (nofollow = false);
        return value.replace(/([a-z]+:\/\/\w([-\w\.]+)*|\w+(\.\w+)+)(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?/g, function(u){
          var trimmed_u;
          if (trim_url_limit != null) {
            trimmed_u = u.slice(0, trim_url_limit);
            if (trimmed_u.length < u.length) {
              trimmed_u += "...";
            }
          } else {
            trimmed_u = u;
          }
          return "<a href=\"" + u + "\"" + (nofollow ? " rel=\"nofollow\"" : "") + ">" + trimmed_u + "</a>";
        });
      }
      return $urlize;
    }()),
    $wordwrap: (function(){
      function $wordwrap(s, width, break_long_words){
        var res, actual, sp, words, w, i, _i, _ref, _len, _to;
        width == null && (width = 79);
        break_long_words == null && (break_long_words = true);
        res = [];
        actual = "";
        sp = /^\s+$/;
        words = [];
        for (_i = 0, _len = (_ref = s.split(/\b/)).length; _i < _len; ++_i) {
          w = _ref[_i];
          if (break_long_words && w.length > width) {
            for (i = 0, _to = w.length - 1; width < 0 ? i >= _to : i <= _to; i += width) {
              words.push(w.slice(i, i + width));
            }
          } else {
            words.push(w);
          }
        }
        for (_i = 0, _len = words.length; _i < _len; ++_i) {
          w = words[_i];
          if (actual.length + w.length <= width || sp.test(w) || actual === "") {
            actual += w;
          } else {
            res.push(actual);
            actual = w;
          }
        }
        res.push(actual);
        return res.join("\n");
      }
      return $wordwrap;
    }()),
    $xmlattr: (function(){
      function $xmlattr(d, autospace){
        var res, k, v;
        autospace == null && (autospace = true);
        res = [];
        for (k in d) {
          v = d[k];
          if (v != null) {
            res.push((autospace ? " " : "") + "" + k + "=\"" + $escape(v.toString()) + "\"");
          }
        }
        return res.join("");
      }
      return $xmlattr;
    }())
  });
  exports['$center'].dependencies = ['$repeat'];
  exports['$escapejs'].dependencies = ['$repeat'];
  exports['$groupby'].dependencies = ['$resolve_attr'];
  exports['$indent'].dependencies = ['$repeat'];
  exports['$join'].dependencies = ['$resolve_attr'];
  exports['$sort'].dependencies = ['$resolve_attr'];
  exports['$sum'].dependencies = ['$resolve_attr'];
  exports['$title'].dependencies = ['$capitalize'];
  exports['$xmlattr'].dependencies = ['$escape'];
  exports['$pprint'].dependencies = ['$pprint_', '$escape'];
  exports['$hprint'].dependencies = ['$pprint_', '$escape'];
  function __import(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
